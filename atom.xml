<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡闹的日子</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.iamxcc.com/"/>
  <updated>2016-08-13T06:20:42.248Z</updated>
  <id>http://blog.iamxcc.com/</id>
  
  <author>
    <name>XCC</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jquery插件实现萤火虫效果</title>
    <link href="http://blog.iamxcc.com/2016/08/13/jquery%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0%E8%90%A4%E7%81%AB%E8%99%AB%E6%95%88%E6%9E%9C/"/>
    <id>http://blog.iamxcc.com/2016/08/13/jquery插件实现萤火虫效果/</id>
    <published>2016-08-13T05:52:51.000Z</published>
    <updated>2016-08-13T06:20:42.248Z</updated>
    
    <content type="html"><![CDATA[<p>如果博客页面是黑色的，可以添加一些萤火虫效果在上面，从而显得不那么单调。<a id="more"></a></p>
<p>源码在<a href="https://github.com/iamxcc/jquery-firefly" target="_blank" rel="external">jQuery-firefly</a>上，支持一下。</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>直接在页面上添加上这两行代码即可，不过记得要在jquery之下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"firefly.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">$(<span class="built_in">document</span>).firefly();</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果博客页面是黑色的，可以添加一些萤火虫效果在上面，从而显得不那么单调。
    
    </summary>
    
      <category term="jQuery" scheme="http://blog.iamxcc.com/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="http://blog.iamxcc.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>git推送文件到github步骤</title>
    <link href="http://blog.iamxcc.com/2016/08/13/git%E6%8E%A8%E9%80%81%E6%96%87%E4%BB%B6%E5%88%B0github%E6%AD%A5%E9%AA%A4/"/>
    <id>http://blog.iamxcc.com/2016/08/13/git推送文件到github步骤/</id>
    <published>2016-08-13T03:41:50.000Z</published>
    <updated>2016-08-13T03:48:46.131Z</updated>
    
    <content type="html"><![CDATA[<p>每次想用git推送文件到github时，总是忘记那几个命令，如果出错还不知道是怎么回事。所以在这里做个记录，方便下次翻阅。<a id="more"></a></p>
<h3 id="推送到新的仓库"><a href="#推送到新的仓库" class="headerlink" title="推送到新的仓库"></a>推送到新的仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"# hexo-source"</span> &gt;&gt; README.md</div><div class="line">git init</div><div class="line">git add README.md</div><div class="line">git commit -m <span class="string">"first commit"</span></div><div class="line">git remote add origin git@github.com:iamxcc/hexo-source.git</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<h3 id="推送到已有仓库"><a href="#推送到已有仓库" class="headerlink" title="推送到已有仓库"></a>推送到已有仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m <span class="string">"first commit"</span></div><div class="line">git remote add origin git@github.com:iamxcc/hexo-source.git</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<p>如果已经推送过了，那么可以省略<code>git remote add origin git@github.com:iamxcc/hexo-source.git</code>这句。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次想用git推送文件到github时，总是忘记那几个命令，如果出错还不知道是怎么回事。所以在这里做个记录，方便下次翻阅。
    
    </summary>
    
      <category term="Git" scheme="http://blog.iamxcc.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://blog.iamxcc.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 74:Search a 2D Matrix</title>
    <link href="http://blog.iamxcc.com/2016/08/13/LeetCode-74-Search-a-2D-Matrix/"/>
    <id>http://blog.iamxcc.com/2016/08/13/LeetCode-74-Search-a-2D-Matrix/</id>
    <published>2016-08-13T03:09:30.000Z</published>
    <updated>2016-08-13T03:10:56.688Z</updated>
    
    <content type="html"><![CDATA[<p>Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties: <a id="more"></a></p>
<p>Integers in each row are sorted from left to right.<br>The first integer of each row is greater than the last integer of the previous row.<br>For example,</p>
<p>Consider the following matrix:</p>
<blockquote>
<p>[<br>  [1,   3,  5,  7],<br>  [10, 11, 16, 20],<br>  [23, 30, 34, 50]<br>]</p>
</blockquote>
<p>Given target = <code>3</code>, return <code>true</code>.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">searchMatrix</span><span class="params">(<span class="keyword">int</span>** matrix, <span class="keyword">int</span> matrixRowSize, <span class="keyword">int</span> matrixColSize, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> high = matrixRowSize*matrixColSize - <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> mid = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (low &lt; high) &#123;</div><div class="line">        mid = (low + high) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (matrix[mid / matrixColSize][mid % matrixColSize] &gt; target) &#123;</div><div class="line">            high = mid - <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matrix[mid / matrixColSize][mid % matrixColSize] &lt; target) &#123;</div><div class="line">            low = mid + <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (matrix[low / matrixColSize][low % matrixColSize] != target) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Array" scheme="http://blog.iamxcc.com/tags/Array/"/>
    
      <category term="Binary Search" scheme="http://blog.iamxcc.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 378:Kth Smallest Element in a Sorted Matrix</title>
    <link href="http://blog.iamxcc.com/2016/08/13/LeetCode-378-Kth-Smallest-Element-in-a-Sorted-Matrix/"/>
    <id>http://blog.iamxcc.com/2016/08/13/LeetCode-378-Kth-Smallest-Element-in-a-Sorted-Matrix/</id>
    <published>2016-08-13T02:37:11.000Z</published>
    <updated>2016-08-13T02:38:27.216Z</updated>
    
    <content type="html"><![CDATA[<p>Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.</p>
<p>Note that it is the kth smallest element in the sorted order, not the kth distinct element.</p>
<p><strong>Example:</strong></p>
<blockquote>
<p>matrix = [<br>   [ 1,  5,  9],<br>   [10, 11, 13],<br>   [12, 13, 15]<br>],<br>k = 8,</p>
</blockquote>
<p>return 13.<br><strong>Note:</strong><br>You may assume k is always valid, <code>1 ≤ k ≤ n2</code>.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(<span class="keyword">int</span>** matrix, <span class="keyword">int</span> matrixRowSize, <span class="keyword">int</span> matrixColSize, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> minVal = matrix[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">    <span class="keyword">int</span> maxVal = matrix[matrixRowSize<span class="number">-1</span>][matrixColSize<span class="number">-1</span>];</div><div class="line">    <span class="keyword">int</span> midVal = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (minVal &lt; maxVal) &#123;</div><div class="line">        midVal = (minVal + maxVal) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i  = <span class="number">0</span>; i &lt; matrixRowSize &amp;&amp; matrix[i][<span class="number">0</span>] &lt;= midVal; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; matrixColSize; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (matrix[i][j] &lt;= midVal) &#123;</div><div class="line">                    count++;   </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (k &lt;= count) &#123;</div><div class="line">            maxVal = midVal;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            minVal = midVal + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        count = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> minVal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Array" scheme="http://blog.iamxcc.com/tags/Array/"/>
    
      <category term="Binary Search" scheme="http://blog.iamxcc.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 34:Search for a Range</title>
    <link href="http://blog.iamxcc.com/2016/08/13/LeetCode-34-Search-for-a-Range/"/>
    <id>http://blog.iamxcc.com/2016/08/13/LeetCode-34-Search-for-a-Range/</id>
    <published>2016-08-13T00:54:59.000Z</published>
    <updated>2016-08-13T00:56:04.213Z</updated>
    
    <content type="html"><![CDATA[<p>Given a sorted array of integers, find the starting and ending position of a given target value. <a id="more"></a></p>
<p>Your algorithm’s runtime complexity must be in the order of O(log n).</p>
<p>If the target is not found in the array, return [-1, -1].</p>
<p>For example,<br>Given [5, 7, 7, 8, 8, 10] and target value 8,<br>return [3, 4].</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Return an array of size *returnSize.</div><div class="line"> * Note: The returned array must be malloced, assume caller calls free().</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">int</span>* <span class="title">searchRange</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> target, <span class="keyword">int</span>* returnSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span>* res = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">2</span>);</div><div class="line">    res[<span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">    res[<span class="number">1</span>] = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> high = numsSize - <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> mid = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (low &lt; high) &#123;</div><div class="line">        mid = (low + high) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</div><div class="line">            low = mid + <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            high = mid;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (nums[low] != target) &#123;</div><div class="line">        *returnSize = <span class="number">2</span>;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        res[<span class="number">0</span>] = low;</div><div class="line">    &#125;</div><div class="line">    high = numsSize - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (low &lt; high) &#123;</div><div class="line">        mid = (low + high) / <span class="number">2</span> + <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</div><div class="line">            high = mid - <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            low = mid;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    res[<span class="number">1</span>] = high;</div><div class="line">    *returnSize = <span class="number">2</span>;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a sorted array of integers, find the starting and ending position of a given target value.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Array" scheme="http://blog.iamxcc.com/tags/Array/"/>
    
      <category term="Binary Search" scheme="http://blog.iamxcc.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 154:Find Minimum in Rotated Sorted Array I,II</title>
    <link href="http://blog.iamxcc.com/2016/08/13/LeetCode-154-Find-Minimum-in-Rotated-Sorted-Array-I-II/"/>
    <id>http://blog.iamxcc.com/2016/08/13/LeetCode-154-Find-Minimum-in-Rotated-Sorted-Array-I-II/</id>
    <published>2016-08-12T23:33:20.000Z</published>
    <updated>2016-08-13T00:55:32.165Z</updated>
    
    <content type="html"><![CDATA[<p>Suppose a sorted array is rotated at some pivot unknown to you beforehand. <a id="more"></a></p>
<p>(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).</p>
<p>Find the minimum element.</p>
<p>You may assume no duplicate exists in the array.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> move = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> min = nums[<span class="number">0</span>];</div><div class="line">    <span class="keyword">while</span> (move &lt; numsSize) &#123;</div><div class="line">        <span class="keyword">if</span> (nums[move] &lt; min) &#123;</div><div class="line">            min = nums[move];</div><div class="line">        &#125;</div><div class="line">        move++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> min;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Binary Search<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> high = numsSize - <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> mid = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (low &lt; high) &#123;</div><div class="line">        mid = (low + high) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (nums[mid] &lt; nums[high]) &#123;</div><div class="line">            high = mid;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; nums[high]) &#123;</div><div class="line">            low = mid + <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            high--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> nums[low];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Suppose a sorted array is rotated at some pivot unknown to you beforehand.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Array" scheme="http://blog.iamxcc.com/tags/Array/"/>
    
      <category term="Binary Search" scheme="http://blog.iamxcc.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 162: Find Peak Element</title>
    <link href="http://blog.iamxcc.com/2016/08/12/LeetCode-162-Find-Peak-Element/"/>
    <id>http://blog.iamxcc.com/2016/08/12/LeetCode-162-Find-Peak-Element/</id>
    <published>2016-08-12T03:40:49.000Z</published>
    <updated>2016-08-12T03:42:40.155Z</updated>
    
    <content type="html"><![CDATA[<p>A peak element is an element that is greater than its neighbors. <a id="more"></a> </p>
<p>Given an input array where num[i] ≠ num[i+1], find a peak element and return its index.</p>
<p>The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.</p>
<p>You may imagine that <code>num[-1] = num[n] = -∞</code>.</p>
<p>For example, in array <code>[1, 2, 3, 1]</code>, <code>3</code> is a peak element and your function should return the index number <code>2</code>.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numsSize - <span class="number">1</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (nums[i] &lt; nums[i+<span class="number">1</span>]) &#123;</div><div class="line">            index = i + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> index;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A peak element is an element that is greater than its neighbors.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Array" scheme="http://blog.iamxcc.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 48: Rotate Image</title>
    <link href="http://blog.iamxcc.com/2016/08/12/LeetCode-48-Rotate-Image/"/>
    <id>http://blog.iamxcc.com/2016/08/12/LeetCode-48-Rotate-Image/</id>
    <published>2016-08-12T03:13:48.000Z</published>
    <updated>2016-08-12T09:36:09.551Z</updated>
    
    <content type="html"><![CDATA[<p>You are given an n x n 2D matrix representing an image. Rotate the image by 90 degrees (clockwise). <a id="more"></a></p>
<p>Follow up:<br>Could you do this in-place?</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * clockwise rotate</div><div class="line"> * first reverse up to down, then swap the symmetry </div><div class="line"> * 1 2 3     7 8 9     7 4 1</div><div class="line"> * 4 5 6  =&gt; 4 5 6  =&gt; 8 5 2</div><div class="line"> * 7 8 9     1 2 3     9 6 3</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>** matrix, <span class="keyword">int</span> matrixRowSize, <span class="keyword">int</span> matrixColSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrixRowSize / <span class="number">2</span>; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; matrixColSize; j++) &#123;</div><div class="line">			matrix[i][j] ^= matrix[matrixRowSize - <span class="number">1</span> - i][j];</div><div class="line">			matrix[matrixRowSize - <span class="number">1</span> - i][j] ^= matrix[i][j];</div><div class="line">			matrix[i][j] ^= matrix[matrixRowSize - <span class="number">1</span> - i][j];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrixRowSize - <span class="number">1</span>; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; matrixColSize; j++) &#123;</div><div class="line">			matrix[i][j] ^= matrix[j][i];</div><div class="line">			matrix[j][i] ^= matrix[i][j];</div><div class="line">			matrix[i][j] ^= matrix[j][i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;You are given an n x n 2D matrix representing an image. Rotate the image by 90 degrees (clockwise).
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Array" scheme="http://blog.iamxcc.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 53: Maximum Subarray</title>
    <link href="http://blog.iamxcc.com/2016/08/12/LeetCode-53-Maximum-Subarray/"/>
    <id>http://blog.iamxcc.com/2016/08/12/LeetCode-53-Maximum-Subarray/</id>
    <published>2016-08-12T01:20:36.000Z</published>
    <updated>2016-08-12T01:21:42.052Z</updated>
    
    <content type="html"><![CDATA[<p>Find the contiguous subarray within an array (containing at least one number) which has the largest sum. <a id="more"></a><br>For example, given the array <code>[−2,1,−3,4,−1,2,1,−5,4]</code>,<br>the contiguous subarray <code>[4,−1,2,1]</code> has the largest <code>sum = 6</code>.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> move = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> res = nums[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</div><div class="line">            sum = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        sum += nums[i];</div><div class="line">        <span class="keyword">if</span> (res &lt;= sum) &#123;</div><div class="line">            res = sum;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Find the contiguous subarray within an array (containing at least one number) which has the largest sum.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Array" scheme="http://blog.iamxcc.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 35: Search Insert Position</title>
    <link href="http://blog.iamxcc.com/2016/08/12/LeetCode-35-Search-Insert-Position/"/>
    <id>http://blog.iamxcc.com/2016/08/12/LeetCode-35-Search-Insert-Position/</id>
    <published>2016-08-12T01:01:23.000Z</published>
    <updated>2016-08-12T01:03:41.053Z</updated>
    
    <content type="html"><![CDATA[<p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order. <a id="more"></a><br>You may assume no duplicates in the array.<br>Here are few examples.<br><code>[1,3,5,6]</code>, 5 → 2<br><code>[1,3,5,6]</code>, 2 → 1<br><code>[1,3,5,6]</code>, 7 → 4<br><code>[1,3,5,6]</code>, 0 → 0</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> move = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(move &lt; numsSize) &#123;</div><div class="line">        <span class="keyword">if</span> (nums[move] &gt; target) &#123;</div><div class="line">            <span class="keyword">return</span> move &gt; <span class="number">0</span> ? move : <span class="number">0</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[move] == target) &#123;</div><div class="line">            <span class="keyword">return</span> move;</div><div class="line">        &#125;</div><div class="line">        move++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> move;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Array" scheme="http://blog.iamxcc.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 11: Container With Most Water</title>
    <link href="http://blog.iamxcc.com/2016/08/12/LeetCode-11-Container-With-Most-Water/"/>
    <id>http://blog.iamxcc.com/2016/08/12/LeetCode-11-Container-With-Most-Water/</id>
    <published>2016-08-11T23:59:36.000Z</published>
    <updated>2016-08-12T00:51:46.262Z</updated>
    
    <content type="html"><![CDATA[<p>Given n non-negative integers a1, a2, …, an, where each represents a point at coordinate (i, ai). <a id="more"></a>n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.<br><strong>Note:</strong> You may not slant the container.</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote>
<p>有两个指针i和j分别指向头和尾， 如果a[i] &lt; a[j], 则i++,否则j–:<br>证明：<br>对任意ｋ&lt; j：<br>都有(k-i)<em>min(a[k],a[i]) &lt; (j-i)min(a[j],a[i]) = (j-i)a[i]<br><em>*因为:</em></em><br>(k-i) &lt; (j-i)<br>min(a[k],a[i]) &lt; a[i] &lt; min(a[j],a[i])<br>所以此种情况移动j只能得到更小的值， 移动j无用， 只能移动i。 反之亦然。</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>* height, <span class="keyword">int</span> heightSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> right = heightSize - <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">        <span class="keyword">if</span> (height[left] &lt;= height[right]) &#123;</div><div class="line">            temp = (right - left) * height[left];</div><div class="line">            left++;</div><div class="line">            <span class="keyword">if</span> (temp &gt;= max) &#123;</div><div class="line">                max = temp;</div><div class="line">            &#125;</div><div class="line">            i++;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            temp = (right - left) * height[right];</div><div class="line">            right--;</div><div class="line">            <span class="keyword">if</span> (temp &gt;= max) &#123;</div><div class="line">                max = temp;</div><div class="line">            &#125;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> max;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given n non-negative integers a1, a2, …, an, where each represents a point at coordinate (i, ai).
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Array" scheme="http://blog.iamxcc.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 121: Best Time to Buy and Sell Stock I, II, III</title>
    <link href="http://blog.iamxcc.com/2016/08/11/LeetCode-121-Best-Time-to-Buy-and-Sell-Stock-I-II-III/"/>
    <id>http://blog.iamxcc.com/2016/08/11/LeetCode-121-Best-Time-to-Buy-and-Sell-Stock-I-II-III/</id>
    <published>2016-08-11T05:56:26.000Z</published>
    <updated>2016-08-11T06:49:30.772Z</updated>
    
    <content type="html"><![CDATA[<p>Say you have an array for which the ith element is the price of a given stock on day i.If you were only permitted to complete at most one transaction <a id="more"></a>(ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>
<p><strong>Example 1:</strong></p>
<blockquote>
<p>Input: [7, 1, 5, 3, 6, 4]<br>Output: 5<br>max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)</p>
</blockquote>
<p><strong>Example 2:</strong></p>
<blockquote>
<p>Input: [7, 6, 4, 3, 1]<br>Output: 0<br>In this case, no transaction is done, i.e. max profit = 0.</p>
</blockquote>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>* prices, <span class="keyword">int</span> pricesSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> low = prices[<span class="number">0</span>];</div><div class="line">    <span class="keyword">int</span> profit = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pricesSize; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (low &gt; prices[i]) &#123;</div><div class="line">            low = prices[i];</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prices[i] - low &gt; profit) &#123;</div><div class="line">            profit = prices[i] - low;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> profit;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Best-Time-to-Buy-and-Sell-Stock-II"><a href="#Best-Time-to-Buy-and-Sell-Stock-II" class="headerlink" title="Best Time to Buy and Sell Stock II"></a>Best Time to Buy and Sell Stock II</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>* prices, <span class="keyword">int</span> pricesSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> low = prices[<span class="number">0</span>];</div><div class="line">    <span class="keyword">int</span> profit = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pricesSize; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (low &gt; prices[i]) &#123;</div><div class="line">            low = prices[i];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            profit = profit + prices[i] - low;</div><div class="line">            low = prices[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> profit;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Best-Time-to-Buy-and-Sell-Stock-III"><a href="#Best-Time-to-Buy-and-Sell-Stock-III" class="headerlink" title="Best Time to Buy and Sell Stock III"></a>Best Time to Buy and Sell Stock III</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>Design an algorithm to find the maximum profit. You may complete at most two transactions.</p>
<p><strong>Note:</strong><br>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>* prices, <span class="keyword">int</span> pricesSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> maxProfit[pricesSize];</div><div class="line">    <span class="keyword">int</span> maxRevealProfit[pricesSize];</div><div class="line">    maxProfit[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    maxRevealProfit[pricesSize - <span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> low = prices[<span class="number">0</span>];</div><div class="line">    <span class="keyword">int</span> profit = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pricesSize; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (low &gt; prices[i]) &#123;</div><div class="line">            low = prices[i];</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prices[i] - low &gt; profit) &#123;</div><div class="line">            profit = prices[i] - low;</div><div class="line">        &#125;</div><div class="line">        maxProfit[i] = profit;</div><div class="line">    &#125;</div><div class="line">    profit = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> high = prices[pricesSize - <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = pricesSize - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">        <span class="keyword">if</span> (high &lt; prices[i]) &#123;</div><div class="line">            high = prices[i];</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (profit &lt; high - prices[i])&#123;</div><div class="line">            profit = high - prices[i];</div><div class="line">        &#125;</div><div class="line">        maxRevealProfit[i] = profit;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pricesSize; i++)&#123;</div><div class="line">        <span class="keyword">int</span> tmp = maxProfit[i] + maxRevealProfit[i];</div><div class="line">        <span class="keyword">if</span>(res &lt; tmp) &#123;</div><div class="line">            res = tmp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Say you have an array for which the ith element is the price of a given stock on day i.If you were only permitted to complete at most one transaction
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Dynamic Programming" scheme="http://blog.iamxcc.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 287: Find the Duplicate Number</title>
    <link href="http://blog.iamxcc.com/2016/08/11/LeetCode-287-Find-the-Duplicate-Number/"/>
    <id>http://blog.iamxcc.com/2016/08/11/LeetCode-287-Find-the-Duplicate-Number/</id>
    <published>2016-08-11T03:40:43.000Z</published>
    <updated>2016-08-11T05:59:02.807Z</updated>
    
    <content type="html"><![CDATA[<p>Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. <a id="more"></a>Assume that there is only one duplicate number, find the duplicate one.</p>
<p><strong>Note:</strong></p>
<ul>
<li>You must not modify the array (assume the array is read only).</li>
<li>You must use only constant, O(1) extra space.</li>
<li>Your runtime complexity should be less than O(n2).</li>
<li>There is only one duplicate number in the array, but it could be repeated more than once.</li>
</ul>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><h3 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h3><p>实际上，我们可以根据抽屉原理简化刚才的暴力法。我们不一定要依次选择数，然后看是否有这个数的重复数，我们可以用二分法先选取n/2，按照抽屉原理，整个数组中如果小于等于n/2的数的数量大于n/2，说明1到n/2这个区间是肯定有重复数字的。比如6个抽屉，如果有7个袜子要放到抽屉里，那肯定有一个抽屉至少两个袜子。这里抽屉就是1到n/2的每一个数，而袜子就是整个数组中小于等于n/2的那些数。这样我们就能知道下次选择的数的范围，如果1到n/2区间内肯定有重复数字，则下次在1到n/2范围内找，否则在n/2到n范围内找。下次找的时候，还是找一半。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> minValue = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> maxValue = numsSize - <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> mid = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(minValue &lt; maxValue) &#123;</div><div class="line">        mid = (maxValue + minValue) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; numsSize; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[i] &lt;= mid) &#123;</div><div class="line">                count++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (count &gt; mid) &#123;</div><div class="line">            maxValue = mid;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            minValue = mid + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        count = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> minValue;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="映射找环法"><a href="#映射找环法" class="headerlink" title="映射找环法"></a>映射找环法</h3><p>假设数组中没有重复，那我们可以做到这么一点，就是将数组的下标和1到n每一个数一对一的映射起来。比如数组是213,则映射关系为0-&gt;2, 1-&gt;1, 2-&gt;3。假设这个一对一映射关系是一个函数f(n)，其中n是下标，f(n)是映射到的数。如果我们从下标为0出发，根据这个函数计算出一个值，以这个值为新的下标，再用这个函数计算，以此类推，直到下标超界。实际上可以产生一个类似链表一样的序列。比如在这个例子中有两个下标的序列，0-&gt;2-&gt;3。</p>
<p>但如果有重复的话，这中间就会产生多对一的映射，比如数组2131,则映射关系为0-&gt;2, {1，3}-&gt;1, 2-&gt;3。这样，我们推演的序列就一定会有环路了，这里下标的序列是0-&gt;2-&gt;3-&gt;1-&gt;1-&gt;1-&gt;1-&gt;…，而环的起点就是重复的数。</p>
<p>所以该题实际上就是找环路起点的题，和Linked List Cycle II一样。我们先用快慢两个下标都从0开始，快下标每轮映射两次，慢下标每轮映射一次，直到两个下标再次相同。这时候保持慢下标位置不变，再用一个新的下标从0开始，这两个下标都继续每轮映射一次，当这两个下标相遇时，就是环的起点，也就是重复的数。对这个找环起点算法不懂的，请参考Floyd’s Algorithm。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> slow = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> fast = <span class="number">0</span>;</div><div class="line">        <span class="comment">// 找到快慢指针相遇的地方</span></div><div class="line">        <span class="keyword">do</span>&#123;</div><div class="line">            slow = nums[slow];</div><div class="line">            fast = nums[nums[fast]];</div><div class="line">        &#125; <span class="keyword">while</span>(slow != fast);</div><div class="line">        <span class="keyword">int</span> find = <span class="number">0</span>;</div><div class="line">        <span class="comment">// 用一个新指针从头开始，直到和慢指针相遇</span></div><div class="line">        <span class="keyword">while</span>(find != slow)&#123;</div><div class="line">            slow = nums[slow];</div><div class="line">            find = nums[find];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> find;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Array" scheme="http://blog.iamxcc.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 100: Same Tree</title>
    <link href="http://blog.iamxcc.com/2016/08/11/LeetCode-100-Same-Tree/"/>
    <id>http://blog.iamxcc.com/2016/08/11/LeetCode-100-Same-Tree/</id>
    <published>2016-08-11T01:21:44.000Z</published>
    <updated>2016-08-11T01:25:25.602Z</updated>
    
    <content type="html"><![CDATA[<p>Given two binary trees, write a function to check if they are equal or not. Two binary trees are considered equal if they are structurally identical and the nodes have the same value. <a id="more"></a></p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     struct TreeNode *left;</div><div class="line"> *     struct TreeNode *right;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isSameTree</span><span class="params">(<span class="keyword">struct</span> TreeNode* p, <span class="keyword">struct</span> TreeNode* q)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span> &amp;&amp; q == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="literal">NULL</span> || q == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (p -&gt; val == q -&gt; val) &#123;</div><div class="line">            <span class="keyword">return</span> isSameTree(p -&gt; left, q -&gt; left) &amp;&amp; isSameTree(p -&gt; right, q -&gt; right);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given two binary trees, write a function to check if they are equal or not. Two binary trees are considered equal if they are structurally identical and the nodes have the same value.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://blog.iamxcc.com/tags/Tree/"/>
    
  </entry>
  
  <entry>
    <title>PAT(Basic Level) 1001: 害死人不偿命的(3n+1)猜想</title>
    <link href="http://blog.iamxcc.com/2016/08/10/PAT-Basic-Level-1001-%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%84-3n-1-%E7%8C%9C%E6%83%B3/"/>
    <id>http://blog.iamxcc.com/2016/08/10/PAT-Basic-Level-1001-害死人不偿命的-3n-1-猜想/</id>
    <published>2016-08-10T12:05:49.000Z</published>
    <updated>2016-08-10T15:39:58.142Z</updated>
    
    <content type="html"><![CDATA[<p>卡拉兹(Callatz)猜想：对任何一个自然数n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把(3n+1)砍掉一半。<a id="more"></a> 这样一直反复砍下去，最后一定在某一步得到n=1。卡拉兹在1950年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证(3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p>
<p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过1000的正整数n，简单地数一下，需要多少步（砍几下）才能得到n=1？</p>
<p>输入格式：每个测试输入包含1个测试用例，即给出自然数n的值。</p>
<p>输出格式：输出从n计算到1需要的步数。</p>
<p>输入样例：<br>3<br>输出样例：<br>5</p>
<h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</div><div class="line">	<span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span> (num != <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">			num /= <span class="number">2</span>;</div><div class="line">			count++;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			num = (num * <span class="number">3</span> + <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">			count++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d/n"</span>, count);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;卡拉兹(Callatz)猜想：对任何一个自然数n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把(3n+1)砍掉一半。
    
    </summary>
    
      <category term="PAT" scheme="http://blog.iamxcc.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="http://blog.iamxcc.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>L1-002: 打印沙漏</title>
    <link href="http://blog.iamxcc.com/2016/08/10/L1-002-%E6%89%93%E5%8D%B0%E6%B2%99%E6%BC%8F/"/>
    <id>http://blog.iamxcc.com/2016/08/10/L1-002-打印沙漏/</id>
    <published>2016-08-10T11:00:27.000Z</published>
    <updated>2016-08-10T14:19:24.680Z</updated>
    
    <content type="html"><![CDATA[<p>本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印 <a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*****</div><div class="line"> ***</div><div class="line">  *</div><div class="line"> ***</div><div class="line">*****</div></pre></td></tr></table></figure></p>
<p>所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。</p>
<p>给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。</p>
<p>输入格式：</p>
<p>输入在一行给出1个正整数N（&lt;=1000）和一个符号，中间以空格分隔。</p>
<p>输出格式：</p>
<p>首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">输入样例：</div><div class="line">19 *</div><div class="line">输出样例：</div><div class="line">*****</div><div class="line"> ***</div><div class="line">  *</div><div class="line"> ***</div><div class="line">*****</div><div class="line">2</div></pre></td></tr></table></figure></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">	<span class="keyword">char</span> symbol;</div><div class="line">	<span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> times = <span class="number">0</span>;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %c"</span>, &amp;num, &amp;symbol);</div><div class="line">	max = <span class="built_in">sqrt</span>(<span class="number">2</span>*(num + <span class="number">1</span>)) - <span class="number">1</span>;</div><div class="line">	max = (max % <span class="number">2</span>) == <span class="number">0</span> ? max - <span class="number">1</span> : max;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; max; j++) &#123;</div><div class="line">			<span class="keyword">int</span> temp = i &gt; max / <span class="number">2</span> ? (max - i - <span class="number">1</span>) : i;</div><div class="line">			<span class="keyword">if</span> (temp &lt;= j &amp;&amp; j &lt;= max - <span class="number">1</span> - temp) &#123;</div><div class="line">				<span class="built_in">printf</span>(<span class="string">"%c"</span>, symbol);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (j &gt; max - <span class="number">1</span> - temp) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> left = <span class="built_in">pow</span>((max + <span class="number">1</span>), <span class="number">2</span>) / <span class="number">2</span> - <span class="number">1</span>;</div><div class="line">	left = left &gt; <span class="number">0</span> ? left : <span class="number">0</span>;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num - left);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印
    
    </summary>
    
      <category term="PAT" scheme="http://blog.iamxcc.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="http://blog.iamxcc.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 349: Intersection of Two Arrays</title>
    <link href="http://blog.iamxcc.com/2016/08/10/LeetCode-349-Intersection-of-Two-Arrays/"/>
    <id>http://blog.iamxcc.com/2016/08/10/LeetCode-349-Intersection-of-Two-Arrays/</id>
    <published>2016-08-10T05:25:50.000Z</published>
    <updated>2016-08-10T14:18:47.912Z</updated>
    
    <content type="html"><![CDATA[<p>Given two arrays, write a function to compute their intersection. <a id="more"></a></p>
<p><strong>Example:</strong><br>Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].</p>
<p><strong>Note:</strong><br>Each element in the result must be unique.<br>The result can be in any order.</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> *a, <span class="keyword">const</span> <span class="keyword">int</span> *b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> *a - *b;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Return an array of size *returnSize.</div><div class="line"> * Note: The returned array must be malloced, assume caller calls free().</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">int</span>* <span class="title">intersection</span><span class="params">(<span class="keyword">int</span>* nums1, <span class="keyword">int</span> nums1Size, <span class="keyword">int</span>* nums2, <span class="keyword">int</span> nums2Size, <span class="keyword">int</span>* returnSize)</span> </span>&#123;</div><div class="line">    qsort(nums1,nums1Size,<span class="keyword">sizeof</span>(<span class="keyword">int</span>),cmp);</div><div class="line">    qsort(nums2,nums2Size,<span class="keyword">sizeof</span>(<span class="keyword">int</span>),cmp);</div><div class="line">    <span class="keyword">int</span> size = nums1Size &lt; nums2Size ? nums1Size : nums2Size;</div><div class="line">    <span class="keyword">int</span>* arr = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*size); <span class="comment">//the size of the result will at most be size;</span></div><div class="line">    <span class="keyword">int</span> top = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> p1=<span class="number">0</span>, p2=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(p1&lt;nums1Size &amp;&amp; p2&lt;nums2Size)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums1[p1] &gt; nums2[p2]) p2++;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums1[p1] &lt; nums2[p2]) p1++;</div><div class="line">        <span class="keyword">else</span> <span class="comment">//only collect the equal one;</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(top==<span class="number">-1</span> || arr[top]!=nums1[p1])  <span class="comment">//avoid duplicates;</span></div><div class="line">                arr[++top] = nums1[p1];</div><div class="line">            p1++, p2++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    *returnSize = top+<span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given two arrays, write a function to compute their intersection.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Sort" scheme="http://blog.iamxcc.com/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 242: Valid Anagram</title>
    <link href="http://blog.iamxcc.com/2016/08/10/LeetCode-242-Valid-Anagram/"/>
    <id>http://blog.iamxcc.com/2016/08/10/LeetCode-242-Valid-Anagram/</id>
    <published>2016-08-10T05:08:47.000Z</published>
    <updated>2016-08-10T14:19:08.593Z</updated>
    
    <content type="html"><![CDATA[<p>Given two strings s and t, write a function to determine if t is an anagram of s. <a id="more"></a><br><strong>For example,</strong><br>s = “anagram”, t = “nagaram”, return true.<br>s = “rat”, t = “car”, return false.</p>
<p>Note:<br>You may assume the string contains only lowercase alphabets.</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a, <span class="keyword">const</span> <span class="keyword">char</span> *b)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> *a - *b;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isAnagram</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">char</span>* t)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> lenS = <span class="built_in">strlen</span>(s);</div><div class="line">    <span class="keyword">int</span> lenT = <span class="built_in">strlen</span>(t);</div><div class="line">    <span class="keyword">if</span> (lenS != lenT) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    qsort(s, lenS, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), cmp);</div><div class="line">    qsort(t, lenT, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), cmp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lenS; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (s[i] != t[i]) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given two strings s and t, write a function to determine if t is an anagram of s.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Sort" scheme="http://blog.iamxcc.com/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 191: Number of 1 Bits</title>
    <link href="http://blog.iamxcc.com/2016/08/10/LeetCode-191-Number-of-1-Bits/"/>
    <id>http://blog.iamxcc.com/2016/08/10/LeetCode-191-Number-of-1-Bits/</id>
    <published>2016-08-10T03:42:49.000Z</published>
    <updated>2016-08-10T03:43:36.392Z</updated>
    
    <content type="html"><![CDATA[<p>Write a function that takes an unsigned integer and returns the number of ’1’ bits it has (also known as the Hamming weight). <a id="more"></a><br>For example, the 32-bit integer ’11’ has binary representation <code>00000000000000000000000000001011</code>, so the function should return <code>3</code>.</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">uint32_t</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> nums = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> ( n != <span class="number">0</span>) &#123;</div><div class="line">        nums = nums + (n &amp; <span class="number">1</span>);</div><div class="line">        n = n &gt;&gt; <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> nums;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Write a function that takes an unsigned integer and returns the number of ’1’ bits it has (also known as the Hamming weight).
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Bit Manipulation" scheme="http://blog.iamxcc.com/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 338: Counting Bits</title>
    <link href="http://blog.iamxcc.com/2016/08/10/LeetCode-338-Counting-Bits/"/>
    <id>http://blog.iamxcc.com/2016/08/10/LeetCode-338-Counting-Bits/</id>
    <published>2016-08-10T03:23:44.000Z</published>
    <updated>2016-08-10T03:28:18.920Z</updated>
    
    <content type="html"><![CDATA[<p>Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1’s in their binary representation and return them as an array. <a id="more"></a></p>
<p>Example:<br>For num = 5 you should return [0,1,1,2,1,2].</p>
<p>Follow up:</p>
<p>It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?<br>Space complexity should be O(n).<br>Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Return an array of size *returnSize.</div><div class="line"> * Note: The returned array must be malloced, assume caller calls free().</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">int</span>* <span class="title">countBits</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span>* returnSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span>* res = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>((num+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line">    res[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++ ) &#123;</div><div class="line">        res[i] = res[i&gt;&gt;<span class="number">1</span>] + (i &amp; <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    *returnSize = num + <span class="number">1</span>; </div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1’s in their binary representation and return them as an array.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Bit Manipulation" scheme="http://blog.iamxcc.com/tags/Bit-Manipulation/"/>
    
  </entry>
  
</feed>
