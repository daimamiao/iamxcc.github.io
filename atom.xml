<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡闹的日子</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.iamxcc.com/"/>
  <updated>2016-08-25T04:49:23.512Z</updated>
  <id>http://blog.iamxcc.com/</id>
  
  <author>
    <name>XCC</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A+B Format</title>
    <link href="http://blog.iamxcc.com/2016/08/25/A-B-Format/"/>
    <id>http://blog.iamxcc.com/2016/08/25/A-B-Format/</id>
    <published>2016-08-25T04:49:08.000Z</published>
    <updated>2016-08-25T04:49:23.512Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> a, b;</div><div class="line">	<span class="keyword">int</span> sum;</div><div class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b) != EOF)</div><div class="line">	&#123;</div><div class="line">		sum = a + b;</div><div class="line">		<span class="keyword">if</span> (sum &lt; <span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"-"</span>);</div><div class="line">			sum = -sum;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (sum &gt;= <span class="number">1000000</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d,%03d,%03d"</span>, sum / <span class="number">1000000</span>, sum % <span class="number">1000000</span> / <span class="number">1000</span>, sum % <span class="number">1000</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (sum &gt;= <span class="number">1000</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d, %03d"</span>, sum / <span class="number">1000</span>, sum % <span class="number">1000</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d"</span>, sum);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;d
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>二叉树的遍历</title>
    <link href="http://blog.iamxcc.com/2016/08/24/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>http://blog.iamxcc.com/2016/08/24/二叉树的遍历/</id>
    <published>2016-08-24T03:02:33.000Z</published>
    <updated>2016-08-24T08:52:27.026Z</updated>
    
    <content type="html"><![CDATA[<p>二叉树的遍历包括前序遍历、中序遍历、后序遍历和层次遍历，如果能熟练把握，对于写关于二叉树的代码定能信手拈来。 <a id="more"></a></p>
<h3 id="四种遍历例子"><a href="#四种遍历例子" class="headerlink" title="四种遍历例子"></a>四种遍历例子</h3><h4 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h4><p>使用stl中的queue，代码很简练。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">(Node T)</span></span></div><div class="line">&#123;</div><div class="line">	Q.push(T);</div><div class="line">	Node tmp;</div><div class="line">	<span class="keyword">while</span> (!Q.empty())</div><div class="line">	&#123;</div><div class="line">		tmp = Q.front();</div><div class="line">		Q.pop();</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>, tmp.c);</div><div class="line">		<span class="keyword">if</span> (tmp.lchild)</div><div class="line">		&#123;</div><div class="line">			Q.push(tmp.lchild);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (tmp.rchild)</div><div class="line">		&#123;</div><div class="line">			Q.push(tmp.rchild);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>根据二叉树的前序遍历结果和中序遍历结果生成后序遍历的问题。</p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">	Node* lchild;</div><div class="line">	Node* rchild;</div><div class="line">	<span class="keyword">char</span> c;</div><div class="line">&#125;tree[<span class="number">30</span>];</div><div class="line"><span class="keyword">char</span> str1[<span class="number">30</span>];</div><div class="line"><span class="keyword">char</span> str2[<span class="number">30</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(Node *T)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (T-&gt;lchild)</div><div class="line">	&#123;</div><div class="line">		postOrder(T-&gt;lchild);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (T-&gt;rchild)</div><div class="line">	&#123;</div><div class="line">		postOrder(T-&gt;rchild);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%c"</span>, T-&gt;c);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> loc;</div><div class="line"><span class="function">Node* <span class="title">build</span><span class="params">(<span class="keyword">int</span> s1, <span class="keyword">int</span> e1, <span class="keyword">int</span> s2, <span class="keyword">int</span> e2)</span></span></div><div class="line">&#123;</div><div class="line">	tree[loc].lchild = tree[loc].rchild = <span class="literal">NULL</span>;</div><div class="line">	Node* ret = &amp;tree[loc++];</div><div class="line">	ret-&gt;c = str1[s1];</div><div class="line">	<span class="keyword">int</span> index;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = s2; i &lt;= e2; i++)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (str2[i] == str1[s1])</div><div class="line">		&#123;</div><div class="line">			index = i;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (index != s2)</div><div class="line">	&#123;</div><div class="line">		ret-&gt;lchild = build(s1 + <span class="number">1</span>, s1 + (index - s2), s2, index - <span class="number">1</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (index != e2)</div><div class="line">	&#123;</div><div class="line">		ret-&gt;rchild = build(s1 + (index - s2) + <span class="number">1</span>, e1, index + <span class="number">1</span>, e2);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s"</span>, str1) != EOF)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>, str2);</div><div class="line">		loc = <span class="number">0</span>;</div><div class="line">		<span class="keyword">int</span> L1 = <span class="built_in">strlen</span>(str1);</div><div class="line">		<span class="keyword">int</span> L2 = <span class="built_in">strlen</span>(str2);</div><div class="line">		Node* T = build(<span class="number">0</span>, L1 - <span class="number">1</span>, <span class="number">0</span>, L2 - <span class="number">1</span>);</div><div class="line">		postOrder(T);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二叉树的遍历包括前序遍历、中序遍历、后序遍历和层次遍历，如果能熟练把握，对于写关于二叉树的代码定能信手拈来。
    
    </summary>
    
      <category term="数据结构" scheme="http://blog.iamxcc.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://blog.iamxcc.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉树" scheme="http://blog.iamxcc.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>wordpress常用函数</title>
    <link href="http://blog.iamxcc.com/2016/08/22/wordpress%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>http://blog.iamxcc.com/2016/08/22/wordpress常用函数/</id>
    <published>2016-08-22T04:10:16.000Z</published>
    <updated>2016-08-22T08:04:49.470Z</updated>
    
    <content type="html"><![CDATA[<p>wordpress开发过程中一般要用到很多wordpress的函数，但是这么多我们不可能记下来。所以这里做一个总结，方便下一次查阅。 <a id="more"></a></p>
<h4 id="get-bloginfo"><a href="#get-bloginfo" class="headerlink" title="get_bloginfo()"></a>get_bloginfo()</h4><p>获取博客信息</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;wordpress开发过程中一般要用到很多wordpress的函数，但是这么多我们不可能记下来。所以这里做一个总结，方便下一次查阅。
    
    </summary>
    
      <category term="wordpress" scheme="http://blog.iamxcc.com/categories/wordpress/"/>
    
    
      <category term="wordpress" scheme="http://blog.iamxcc.com/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>并查集</title>
    <link href="http://blog.iamxcc.com/2016/08/21/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://blog.iamxcc.com/2016/08/21/并查集/</id>
    <published>2016-08-21T02:36:38.000Z</published>
    <updated>2016-08-21T02:52:26.729Z</updated>
    
    <content type="html"><![CDATA[<p>图论问题中常常要使用到的一种数据结构 —— 集合，关于它的一些操作我们称为并查集。 <a id="more"></a> </p>
<h3 id="畅通工程"><a href="#畅通工程" class="headerlink" title="畅通工程"></a>畅通工程</h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>某省调查城镇交通状况，得到现有城镇道路统计表，表中列出了每条道路直接连通的城镇。省政府“畅通工程”的目标是使全省任何两个城镇间都可以实现交通（但不一定有直接的道路相连，只要互相间接通过道路可达即可）。问最少还需要建设多少条道路？</p>
<h4 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h4><p>测试输入包含若干测试用例。每个测试用例的第1行给出两个正整数，分别是城镇数目N ( &lt; 1000 )和道路数目M；随后的M行对应M条道路，每行给出一对正整数，分别是该条道路直接连通的两个城镇的编号。为简单起见，城镇从1到N编号。<br>注意:两个城市之间可以有多条道路相通,也就是说<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">3 3</div><div class="line">1 2</div><div class="line">1 2</div><div class="line">2 1</div></pre></td></tr></table></figure></p>
<p>这种输入也是合法的<br>当N为0时，输入结束，该用例不被处理。</p>
<h4 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h4><p>对每个测试用例，在1行里输出最少还需要建设的道路数目。</p>
<h4 id="样例输入："><a href="#样例输入：" class="headerlink" title="样例输入："></a>样例输入：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">4 2</div><div class="line">1 3</div><div class="line">4 3</div><div class="line">3 3</div><div class="line">1 2</div><div class="line">1 3</div><div class="line">2 3</div><div class="line">5 2</div><div class="line">1 2</div><div class="line">3 5</div><div class="line">999 0</div><div class="line">0</div></pre></td></tr></table></figure>
<h4 id="样例输出："><a href="#样例输出：" class="headerlink" title="样例输出："></a>样例输出：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">0</div><div class="line">2</div><div class="line">998</div></pre></td></tr></table></figure>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> tree[<span class="number">1000</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRoot</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (tree[x] == <span class="number">-1</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> x;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> tmp = findRoot(tree[x]);</div><div class="line">		tree[x] = tmp;</div><div class="line">		<span class="keyword">return</span> tmp;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> n, m;</div><div class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) != EOF &amp;&amp; n != <span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</div><div class="line">		&#123;</div><div class="line">			tree[i] = <span class="number">-1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> a, b;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</div><div class="line">			a = findRoot(a);</div><div class="line">			b = findRoot(b);</div><div class="line">			<span class="keyword">if</span> (a != b)</div><div class="line">			&#123;</div><div class="line">				tree[a] = b;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span> (tree[i] == <span class="number">-1</span>)</div><div class="line">			&#123;</div><div class="line">				count++;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count - <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="More-is-better"><a href="#More-is-better" class="headerlink" title="More is better"></a>More is better</h3><h4 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h4><p>Mr Wang wants some boys to help him with a project. Because the project is rather complex, the more boys come, the better it will be. Of course there are certain requirements.Mr Wang selected a room big enough to hold the boys. The boy who are not been chosen has to leave the room immediately. There are 10000000 boys in the room numbered from 1 to 10000000 at the very beginning. After Mr Wang’s selection any two of them who are still in this room should be friends (direct or indirect), or there is only one boy left. Given all the direct friend-pairs, you should decide the best way.</p>
<h4 id="输入：-1"><a href="#输入：-1" class="headerlink" title="输入："></a>输入：</h4><p>The first line of the input contains an integer n (0 ≤ n ≤ 100 000) - the number of direct friend-pairs. The following n lines each contains a pair of numbers A and B separated by a single space that suggests A and B are direct friends. (A ≠ B, 1 ≤ A, B ≤ 10000000)</p>
<h4 id="输出：-1"><a href="#输出：-1" class="headerlink" title="输出："></a>输出：</h4><p>The output in one line contains exactly one integer equals to the maximum number of boys Mr Wang may keep.</p>
<h4 id="样例输入：-1"><a href="#样例输入：-1" class="headerlink" title="样例输入："></a>样例输入：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">4</div><div class="line">1 2</div><div class="line">3 4</div><div class="line">5 6</div><div class="line">1 6</div><div class="line">4</div><div class="line">1 2</div><div class="line">3 4</div><div class="line">5 6</div><div class="line">7 8</div></pre></td></tr></table></figure>
<h4 id="样例输出：-1"><a href="#样例输出：-1" class="headerlink" title="样例输出："></a>样例输出：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">4</div><div class="line">2</div></pre></td></tr></table></figure>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10000001</span></div><div class="line"><span class="keyword">int</span> tree[N];</div><div class="line"><span class="keyword">int</span> sum[N];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRoot</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (tree[x] == <span class="number">-1</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> x;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> tmp = findRoot(tree[x]);</div><div class="line">		tree[x] = tmp;</div><div class="line">		<span class="keyword">return</span> tmp;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> n;</div><div class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= N; i++)</div><div class="line">		&#123;</div><div class="line">			tree[i] = <span class="number">-1</span>;</div><div class="line">			sum[i] = <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> a, b;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</div><div class="line">			a = findRoot(a);</div><div class="line">			b = findRoot(b);</div><div class="line">			<span class="keyword">if</span> (a != b)</div><div class="line">			&#123;</div><div class="line">				tree[a] = b;</div><div class="line">				sum[b] += sum[a];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> count = <span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span> (tree[i] == <span class="number">-1</span> &amp;&amp; sum[i] &gt; count)</div><div class="line">			&#123;</div><div class="line">				count = sum[i];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图论问题中常常要使用到的一种数据结构 —— 集合，关于它的一些操作我们称为并查集。
    
    </summary>
    
      <category term="算法" scheme="http://blog.iamxcc.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://blog.iamxcc.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>广度优先搜索(BFS)</title>
    <link href="http://blog.iamxcc.com/2016/08/20/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-BFS/"/>
    <id>http://blog.iamxcc.com/2016/08/20/广度优先搜索-BFS/</id>
    <published>2016-08-20T03:58:41.000Z</published>
    <updated>2016-08-21T02:53:27.906Z</updated>
    
    <content type="html"><![CDATA[<p>最近通过了两个例子了解了广度优先搜索(BFS)，下面记录一下这两个例子： <a id="more"></a></p>
<h3 id="胜利大逃亡"><a href="#胜利大逃亡" class="headerlink" title="胜利大逃亡"></a>胜利大逃亡</h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>Ignatius被魔王抓走了,有一天魔王出差去了,这可是Ignatius逃亡的好机会.魔王住在一个城堡里,城堡是一个A<em>B</em>C的立方体,可以被表示成A个B*C的矩阵,刚开始Ignatius被关在(0,0,0)的位置,离开城堡的门在(A-1,B-1,C-1)的位置,现在知道魔王将在T分钟后回到城堡,Ignatius每分钟能从一个坐标走到相邻的六个坐标中的其中一个.现在给你城堡的地图,请你计算出Ignatius能否在魔王回来前离开城堡(只要走到出口就算离开城堡,如果走到出口的时候魔王刚好回来也算逃亡成功),如果可以请输出需要多少分钟才能离开,如果不能则输出-1.</p>
<h4 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h4><p>输入数据的第一行是一个正整数K,表明测试数据的数量.每组测试数据的第一行是四个正整数A,B,C和T(1&lt;=A,B,C&lt;=50,1&lt;=T&lt;=1000),它们分别代表城堡的大小和魔王回来的时间.然后是A块输入数据(先是第0块,然后是第1块,第2块……),每块输入数据有B行,每行有C个正整数,代表迷宫的布局,其中0代表路,1代表墙。</p>
<h5 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h5><p>对于每组测试数据,如果Ignatius能够在魔王回来前离开城堡,那么请输出他最少需要多少分钟,否则输出-1.<br>样例输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">3 3 4 20</div><div class="line">0 1 1 1</div><div class="line">0 0 1 1</div><div class="line">0 1 1 1</div><div class="line">1 1 1 1</div><div class="line">1 0 0 1</div><div class="line">0 1 1 1</div><div class="line">0 0 0 0</div><div class="line">0 1 1 0</div><div class="line">0 1 1 0</div></pre></td></tr></table></figure></p>
<p>样例输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">11</div></pre></td></tr></table></figure></p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> State</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> x, y, z;</div><div class="line">	<span class="keyword">int</span> t;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">queue</span>&lt;State&gt; Q;</div><div class="line"><span class="keyword">int</span> go[][<span class="number">3</span>] = &#123;</div><div class="line">	<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</div><div class="line">	<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>,</div><div class="line">	<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</div><div class="line">	<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>,</div><div class="line">	<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, </div><div class="line">	<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">int</span> maze[<span class="number">50</span>][<span class="number">50</span>][<span class="number">50</span>];</div><div class="line"><span class="keyword">int</span> mark[<span class="number">50</span>][<span class="number">50</span>][<span class="number">50</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> A, <span class="keyword">int</span> B, <span class="keyword">int</span> C)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">while</span> (Q.empty() == <span class="literal">false</span>)</div><div class="line">	&#123;</div><div class="line">		State current = Q.front();</div><div class="line">		Q.pop();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> cx = current.x + go[i][<span class="number">0</span>];</div><div class="line">			<span class="keyword">int</span> cy = current.y + go[i][<span class="number">1</span>];</div><div class="line">			<span class="keyword">int</span> cz = current.z + go[i][<span class="number">2</span>];</div><div class="line">			<span class="keyword">if</span> (cx &lt; <span class="number">0</span> || cx &gt;= A || cy &lt; <span class="number">0</span> || cy &gt;= B || cz &lt; <span class="number">0</span> || cz &gt;= C) <span class="keyword">continue</span>;</div><div class="line">			<span class="keyword">if</span> (maze[cx][cy][cz] == <span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">			<span class="keyword">if</span> (mark[cx][cy][cz] == <span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">			State tmp;</div><div class="line">			tmp.x = cx;</div><div class="line">			tmp.y = cy;</div><div class="line">			tmp.z = cz;</div><div class="line">			tmp.t = current.t + <span class="number">1</span>;</div><div class="line">			Q.push(tmp);</div><div class="line">			mark[cx][cy][cz] = <span class="number">1</span>;</div><div class="line">			<span class="keyword">if</span> (cx == A - <span class="number">1</span> &amp;&amp; cy == B - <span class="number">1</span> &amp;&amp; cz == C - <span class="number">1</span>) <span class="keyword">return</span> tmp.t;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> N = <span class="number">0</span>;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</div><div class="line">	<span class="keyword">while</span> (N--)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> A, B, C, T;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;A, &amp;B, &amp;C, &amp;T);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A; i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; B; j++)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; C; k++)</div><div class="line">				&#123;</div><div class="line">					<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;maze[i][j][k]);</div><div class="line">					mark[i][j][k] = <span class="number">0</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">while</span> (Q.empty() == <span class="literal">false</span>)</div><div class="line">		&#123;</div><div class="line">			Q.pop();</div><div class="line">		&#125;</div><div class="line">		mark[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">		State tmp;</div><div class="line">		tmp.t = tmp.x = tmp.y = tmp.z = <span class="number">0</span>;</div><div class="line">		Q.push(tmp);</div><div class="line">		<span class="keyword">int</span> ret = BFS(A, B, C);</div><div class="line">		<span class="keyword">if</span> (ret &lt;= T)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ret);</div><div class="line">			system(<span class="string">"pause"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">			system(<span class="string">"pause"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="非常可乐"><a href="#非常可乐" class="headerlink" title="非常可乐"></a>非常可乐</h3><h4 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h4><p>大家一定觉的运动以后喝可乐是一件很惬意的事情，但是seeyou却不这么认为。因为每次当seeyou买了可乐以后，阿牛就要求和seeyou一起分享这一瓶可乐，而且一定要喝的和seeyou一样多。但seeyou的手中只有两个杯子，它们的容量分别是N 毫升和M 毫升 可乐的体积为S （S&lt;101）毫升(正好装满一瓶) ，它们三个之间可以相互倒可乐 (都是没有刻度的，且 S==N+M，101＞S＞0，N＞0，M＞0) 。聪明的ACMER你们说他们能平分吗？如果能请输出倒可乐的最少的次数，如果不能输出”NO”。</p>
<h4 id="输入：-1"><a href="#输入：-1" class="headerlink" title="输入："></a>输入：</h4><p>三个整数 : S 可乐的体积 , N 和 M是两个杯子的容量，以”0 0 0”结束。</p>
<h4 id="输出：-1"><a href="#输出：-1" class="headerlink" title="输出："></a>输出：</h4><p>如果能平分的话请输出最少要倒的次数，否则输出”NO”。</p>
<h4 id="样例输入："><a href="#样例输入：" class="headerlink" title="样例输入："></a>样例输入：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">7 4 3</div><div class="line">4 1 3</div><div class="line">0 0 0</div></pre></td></tr></table></figure>
<h4 id="样例输出："><a href="#样例输出：" class="headerlink" title="样例输出："></a>样例输出：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NO</div><div class="line">3</div></pre></td></tr></table></figure>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> State</div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> a, b, c;</div><div class="line">	<span class="keyword">int</span> t;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">queue</span>&lt;State&gt; Q;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">AtoB</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> sa, <span class="keyword">int</span> &amp;b, <span class="keyword">int</span> sb)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (sb - b &gt;= a)</div><div class="line">	&#123;</div><div class="line">		b += a;</div><div class="line">		a = <span class="number">0</span>;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		a -= sb - b;</div><div class="line">		b = sb;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> mark[<span class="number">101</span>][<span class="number">101</span>][<span class="number">101</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> S, <span class="keyword">int</span> N, <span class="keyword">int</span> M)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">while</span> (Q.empty() == <span class="literal">false</span>)</div><div class="line">	&#123;</div><div class="line">		State current = Q.front();</div><div class="line">		Q.pop();</div><div class="line">		<span class="keyword">int</span> a, b, c;</div><div class="line"></div><div class="line">		a = current.a;</div><div class="line">		b = current.b;</div><div class="line">		c = current.c;</div><div class="line">		AtoB(a, S, b, N); <span class="comment">// A -&gt; B</span></div><div class="line">		<span class="keyword">if</span> (mark[a][b][c] == <span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			mark[a][b][c] = <span class="number">1</span>;</div><div class="line">			State tmp;</div><div class="line">			tmp.a = a;</div><div class="line">			tmp.b = b;</div><div class="line">			tmp.c = c;</div><div class="line">			tmp.t = current.t + <span class="number">1</span>;</div><div class="line">			<span class="keyword">if</span> (a == S / <span class="number">2</span> &amp;&amp; b == S / <span class="number">2</span>) <span class="keyword">return</span> tmp.t;</div><div class="line">			<span class="keyword">if</span> (a == S / <span class="number">2</span> &amp;&amp; c == S / <span class="number">2</span>) <span class="keyword">return</span> tmp.t;</div><div class="line">			<span class="keyword">if</span> (b == S / <span class="number">2</span> &amp;&amp; c == S / <span class="number">2</span>) <span class="keyword">return</span> tmp.t;</div><div class="line">			Q.push(tmp);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		a = current.a;</div><div class="line">		b = current.b;</div><div class="line">		c = current.c;</div><div class="line">		AtoB(b, N, a, S); <span class="comment">// B -&gt; A</span></div><div class="line">		<span class="keyword">if</span> (mark[a][b][c] == <span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			mark[a][b][c] = <span class="number">1</span>;</div><div class="line">			State tmp;</div><div class="line">			tmp.a = a;</div><div class="line">			tmp.b = b;</div><div class="line">			tmp.c = c;</div><div class="line">			tmp.t = current.t + <span class="number">1</span>;</div><div class="line">			<span class="keyword">if</span> (a == S / <span class="number">2</span> &amp;&amp; b == S / <span class="number">2</span>) <span class="keyword">return</span> tmp.t;</div><div class="line">			<span class="keyword">if</span> (a == S / <span class="number">2</span> &amp;&amp; c == S / <span class="number">2</span>) <span class="keyword">return</span> tmp.t;</div><div class="line">			<span class="keyword">if</span> (b == S / <span class="number">2</span> &amp;&amp; c == S / <span class="number">2</span>) <span class="keyword">return</span> tmp.t;</div><div class="line">			Q.push(tmp);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		a = current.a;</div><div class="line">		b = current.b;</div><div class="line">		c = current.c;</div><div class="line">		AtoB(a, S, c, M); <span class="comment">// A -&gt; C</span></div><div class="line">		<span class="keyword">if</span> (mark[a][b][c] == <span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			mark[a][b][c] = <span class="number">1</span>;</div><div class="line">			State tmp;</div><div class="line">			tmp.a = a;</div><div class="line">			tmp.b = b;</div><div class="line">			tmp.c = c;</div><div class="line">			tmp.t = current.t + <span class="number">1</span>;</div><div class="line">			<span class="keyword">if</span> (a == S / <span class="number">2</span> &amp;&amp; b == S / <span class="number">2</span>) <span class="keyword">return</span> tmp.t;</div><div class="line">			<span class="keyword">if</span> (a == S / <span class="number">2</span> &amp;&amp; c == S / <span class="number">2</span>) <span class="keyword">return</span> tmp.t;</div><div class="line">			<span class="keyword">if</span> (b == S / <span class="number">2</span> &amp;&amp; c == S / <span class="number">2</span>) <span class="keyword">return</span> tmp.t;</div><div class="line">			Q.push(tmp);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		a = current.a;</div><div class="line">		b = current.b;</div><div class="line">		c = current.c;</div><div class="line">		AtoB(c, M, a, S); <span class="comment">// C -&gt; A</span></div><div class="line">		<span class="keyword">if</span> (mark[a][b][c] == <span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			mark[a][b][c] = <span class="number">1</span>;</div><div class="line">			State tmp;</div><div class="line">			tmp.a = a;</div><div class="line">			tmp.b = b;</div><div class="line">			tmp.c = c;</div><div class="line">			tmp.t = current.t + <span class="number">1</span>;</div><div class="line">			<span class="keyword">if</span> (a == S / <span class="number">2</span> &amp;&amp; b == S / <span class="number">2</span>) <span class="keyword">return</span> tmp.t;</div><div class="line">			<span class="keyword">if</span> (a == S / <span class="number">2</span> &amp;&amp; c == S / <span class="number">2</span>) <span class="keyword">return</span> tmp.t;</div><div class="line">			<span class="keyword">if</span> (b == S / <span class="number">2</span> &amp;&amp; c == S / <span class="number">2</span>) <span class="keyword">return</span> tmp.t;</div><div class="line">			Q.push(tmp);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		a = current.a;</div><div class="line">		b = current.b;</div><div class="line">		c = current.c;</div><div class="line">		AtoB(b, N, c, M); <span class="comment">// B -&gt; C</span></div><div class="line">		<span class="keyword">if</span> (mark[a][b][c] == <span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			mark[a][b][c] = <span class="number">1</span>;</div><div class="line">			State tmp;</div><div class="line">			tmp.a = a;</div><div class="line">			tmp.b = b;</div><div class="line">			tmp.c = c;</div><div class="line">			tmp.t = current.t + <span class="number">1</span>;</div><div class="line">			<span class="keyword">if</span> (a == S / <span class="number">2</span> &amp;&amp; b == S / <span class="number">2</span>) <span class="keyword">return</span> tmp.t;</div><div class="line">			<span class="keyword">if</span> (a == S / <span class="number">2</span> &amp;&amp; c == S / <span class="number">2</span>) <span class="keyword">return</span> tmp.t;</div><div class="line">			<span class="keyword">if</span> (b == S / <span class="number">2</span> &amp;&amp; c == S / <span class="number">2</span>) <span class="keyword">return</span> tmp.t;</div><div class="line">			Q.push(tmp);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		a = current.a;</div><div class="line">		b = current.b;</div><div class="line">		c = current.c;</div><div class="line">		AtoB(c, M, b, N); <span class="comment">// C -&gt; B</span></div><div class="line">		<span class="keyword">if</span> (mark[a][b][c] == <span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			mark[a][b][c] = <span class="number">1</span>;</div><div class="line">			State tmp;</div><div class="line">			tmp.a = a;</div><div class="line">			tmp.b = b;</div><div class="line">			tmp.c = c;</div><div class="line">			tmp.t = current.t + <span class="number">1</span>;</div><div class="line">			<span class="keyword">if</span> (a == S / <span class="number">2</span> &amp;&amp; b == S / <span class="number">2</span>) <span class="keyword">return</span> tmp.t;</div><div class="line">			<span class="keyword">if</span> (a == S / <span class="number">2</span> &amp;&amp; c == S / <span class="number">2</span>) <span class="keyword">return</span> tmp.t;</div><div class="line">			<span class="keyword">if</span> (b == S / <span class="number">2</span> &amp;&amp; c == S / <span class="number">2</span>) <span class="keyword">return</span> tmp.t;</div><div class="line">			Q.push(tmp);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> S, N, M;</div><div class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;S, &amp;N, &amp;M) != EOF)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (S == <span class="number">0</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (S % <span class="number">2</span> == <span class="number">1</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=S; i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= N; j++)</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= M; k++)</div><div class="line">				&#123;</div><div class="line">					mark[i][j][k] = <span class="number">0</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		State tmp;</div><div class="line">		tmp.a = S;</div><div class="line">		tmp.b = <span class="number">0</span>;</div><div class="line">		tmp.c = <span class="number">0</span>;</div><div class="line">		tmp.t = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span> (Q.empty() == <span class="literal">false</span>)</div><div class="line">		&#123;</div><div class="line">			Q.pop();</div><div class="line">		&#125;</div><div class="line">		Q.push(tmp);</div><div class="line">		mark[S][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">		<span class="keyword">int</span> ret = BFS(S, N, M);</div><div class="line">		<span class="keyword">if</span> (ret == <span class="number">-1</span>)</div><div class="line">		&#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ret);</div><div class="line">		&#125;</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近通过了两个例子了解了广度优先搜索(BFS)，下面记录一下这两个例子：
    
    </summary>
    
      <category term="算法" scheme="http://blog.iamxcc.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://blog.iamxcc.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>小球下落问题</title>
    <link href="http://blog.iamxcc.com/2016/08/16/%E5%B0%8F%E7%90%83%E4%B8%8B%E8%90%BD%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.iamxcc.com/2016/08/16/小球下落问题/</id>
    <published>2016-08-16T09:56:31.000Z</published>
    <updated>2016-08-18T15:57:55.561Z</updated>
    
    <content type="html"><![CDATA[<p>一颗二叉树，最大深度为D,且所有叶子的深度都相同。所有节点从上到下，从左到右编号为1,2,3…,2^D-1。<a id="more"></a> 在节点1处放一个小球，它会往下落。每个内节点上都有一个开关，初始全部关闭，当每次有小球落到一个开关上时，它的状态都会改变。当小球到达一个内节点时，如果该节点上的开关关闭，则往左走，否则，往右 走，知道走到叶子节点，如图所示:<br><img src="http://7xveyh.com1.z0.glb.clouddn.com/ball.png" alt="小球下落问题"><br>一些小球从节点1处一次开始下落，最后一个小球将会落到哪里呢？输入叶子深度D和小球个数I,输出第I个小球最后所在的叶子编号。假设I不超过整棵树的叶子个数<br>。D&lt;=20,输入最多包含1000组数据。 </p>
<p>输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">4 2 </div><div class="line">3 4 </div><div class="line">10 1 </div><div class="line">2 2 </div><div class="line">8 128 </div><div class="line">16 12345</div></pre></td></tr></table></figure></p>
<p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">12 </div><div class="line">7 </div><div class="line">512 </div><div class="line">3 </div><div class="line">255 </div><div class="line">36358</div></pre></td></tr></table></figure></p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxD = <span class="number">20</span>;</div><div class="line"><span class="keyword">int</span> switcher[<span class="number">1</span> &lt;&lt; maxD] = &#123; <span class="number">0</span> &#125;;</div><div class="line"><span class="keyword">int</span> maxNum = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> D = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> I = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;D, &amp;I) == <span class="number">2</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">memset</span>(switcher, <span class="number">0</span>, <span class="keyword">sizeof</span>(switcher));</div><div class="line">		maxNum = (<span class="number">1</span> &lt;&lt; D) - <span class="number">1</span>;</div><div class="line">		<span class="keyword">int</span> k;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; I; i++)</div><div class="line">		&#123;</div><div class="line">			k = <span class="number">1</span>;</div><div class="line">			<span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">			&#123;</div><div class="line">				switcher[k] = !switcher[k];</div><div class="line">				k = switcher[k] ? k * <span class="number">2</span> : k * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line">				<span class="keyword">if</span> (k &gt; maxNum)</div><div class="line">				&#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, k/<span class="number">2</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一颗二叉树，最大深度为D,且所有叶子的深度都相同。所有节点从上到下，从左到右编号为1,2,3…,2^D-1。
    
    </summary>
    
      <category term="数据结构" scheme="http://blog.iamxcc.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://blog.iamxcc.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉树" scheme="http://blog.iamxcc.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>二叉排序树的建立与遍历</title>
    <link href="http://blog.iamxcc.com/2016/08/16/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91%E7%9A%84%E5%BB%BA%E7%AB%8B%E4%B8%8E%E9%81%8D%E5%8E%86/"/>
    <id>http://blog.iamxcc.com/2016/08/16/二叉排序树的建立与遍历/</id>
    <published>2016-08-16T08:39:25.000Z</published>
    <updated>2016-08-18T15:59:18.277Z</updated>
    
    <content type="html"><![CDATA[<p>二叉排序树的建立与遍历基本没什么花样可变，这里做个记录，方便下次查阅。 <a id="more"></a></p>
<h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>输入一系列整数，建立二叉排序数，并进行前序，中序，后序遍历。</p>
<h4 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h4><p>输入第一行包括一个整数n(1&lt;=n&lt;=100)。<br>接下来的一行包括n个整数。</p>
<h4 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h4><p>可能有多组测试数据，对于每组数据，将题目所给数据建立一个二叉排序树，并对二叉排序树进行前序、中序和后序遍历。<br>每种遍历结果输出一行。每行最后一个数据之后有一个空格。</p>
<h4 id="样例输入："><a href="#样例输入：" class="headerlink" title="样例输入："></a>样例输入：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">5</div><div class="line">1 6 5 9 8</div></pre></td></tr></table></figure>
<h4 id="样例输出："><a href="#样例输出：" class="headerlink" title="样例输出："></a>样例输出：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1 6 5 9 8 </div><div class="line">1 5 6 8 9 </div><div class="line">5 8 9 6 1</div></pre></td></tr></table></figure>
<p><strong>提示：</strong><br>输入中可能有重复元素，但是输出的二叉树遍历序列中重复元素不用输出。</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node</div><div class="line">&#123;</div><div class="line">	Node *lchild;</div><div class="line">	Node *rchild;</div><div class="line">	<span class="keyword">int</span> c;</div><div class="line">&#125;tree[<span class="number">110</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> index;</div><div class="line"><span class="function">Node* <span class="title">createNode</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	tree[index].lchild = tree[index].rchild = <span class="literal">NULL</span>;</div><div class="line">	<span class="keyword">return</span> &amp;tree[index++];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// preorder traversal</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(Node *T)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d "</span>, T-&gt;c);</div><div class="line">	<span class="keyword">if</span> (T-&gt;lchild != <span class="literal">NULL</span>)</div><div class="line">	&#123;</div><div class="line">		preOrder(T-&gt;lchild);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (T-&gt;rchild != <span class="literal">NULL</span>)</div><div class="line">	&#123;</div><div class="line">		preOrder(T-&gt;rchild);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// inorder traversal</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(Node *T)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (T-&gt;lchild != <span class="literal">NULL</span>)</div><div class="line">	&#123;</div><div class="line">		inOrder(T-&gt;lchild);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d "</span>, T-&gt;c);</div><div class="line">	<span class="keyword">if</span> (T-&gt;rchild != <span class="literal">NULL</span>)</div><div class="line">	&#123;</div><div class="line">		inOrder(T-&gt;rchild);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// postorder traversal</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(Node *T)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (T-&gt;lchild != <span class="literal">NULL</span>)</div><div class="line">	&#123;</div><div class="line">		postOrder(T-&gt;lchild);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (T-&gt;rchild != <span class="literal">NULL</span>)</div><div class="line">	&#123;</div><div class="line">		postOrder(T-&gt;rchild);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d "</span>, T-&gt;c);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Node* <span class="title">insert</span><span class="params">(Node *T, <span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (T == <span class="literal">NULL</span>)</div><div class="line">	&#123;</div><div class="line">		T = createNode();</div><div class="line">		T-&gt;c = x;</div><div class="line">		<span class="keyword">return</span> T;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (T-&gt;c &lt; x)</div><div class="line">	&#123;</div><div class="line">		T-&gt;rchild = insert(T-&gt;rchild, x);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (T-&gt;c &gt; x)</div><div class="line">	&#123;</div><div class="line">		T-&gt;lchild = insert(T-&gt;lchild, x);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> T;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF)</div><div class="line">	&#123;</div><div class="line">		index = <span class="number">0</span>;</div><div class="line">		Node *root = <span class="literal">NULL</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> x;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">			root = insert(root, x);</div><div class="line">		&#125;</div><div class="line">		preOrder(root);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">		inOrder(root);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">		postOrder(root);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二叉排序树的建立与遍历基本没什么花样可变，这里做个记录，方便下次查阅。
    
    </summary>
    
      <category term="数据结构" scheme="http://blog.iamxcc.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://blog.iamxcc.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉树" scheme="http://blog.iamxcc.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>STL中的栈</title>
    <link href="http://blog.iamxcc.com/2016/08/15/STL%E4%B8%AD%E7%9A%84%E6%A0%88/"/>
    <id>http://blog.iamxcc.com/2016/08/15/STL中的栈/</id>
    <published>2016-08-15T05:21:50.000Z</published>
    <updated>2016-08-18T16:00:07.133Z</updated>
    
    <content type="html"><![CDATA[<p>栈是一种数据项按序排列的数据结构，只能在它的一端进行删除和插入。 <a id="more"></a>最近在学习STL中一些基础数据结构的模板。因为C语言在使用这些数据结构之前还得自己实现一遍，很是麻烦。而STL中已经帮我们封装好了这些数据结构的内部操作。</p>
<h3 id="栈的基本用法"><a href="#栈的基本用法" class="headerlink" title="栈的基本用法"></a>栈的基本用法</h3><h5 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h5><p>首先使用stack标准模板之前我们需要在加上头文件<code>#include &lt;stack&gt;</code>。并要声明使用标准命名空间<code>using namespace std;</code>。</p>
<p>然后使用<code>stack&lt;int&gt; S;</code>定义一个保存int类型数据的栈S，这样所有有关栈实现的内部操作，STL都已经帮我们实现好了。</p>
<h5 id="内部操作"><a href="#内部操作" class="headerlink" title="内部操作"></a>内部操作</h5><ol>
<li><p>使用<code>S.push()</code>向栈中压进一个数值为i的元素。</p>
</li>
<li><p>使用<code>int x = S.top()</code>读取栈顶元素，并将其值赋予给x。</p>
</li>
<li><p>使用<code>S.pop()</code>弹出栈顶元素。</p>
</li>
</ol>
<h3 id="具体例子"><a href="#具体例子" class="headerlink" title="具体例子"></a>具体例子</h3><h4 id="括号匹配问题"><a href="#括号匹配问题" class="headerlink" title="括号匹配问题"></a>括号匹配问题</h4><h5 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h5><p>在某个字符串（长度不超过100）中有左括号、右括号和大小写字母；规定（与常见的算数式子一样）任何一个左括号都从内到外与在它右边且距离最近的右括号匹配。写一个程序，找到无法匹配的左括号和右括号，输出原来字符串，并在下一行标出不能匹配的括号。不能匹配的左括号用”$”标注,不能匹配的右括号用”?”标注.</p>
<h5 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h5><p>输入包括多组数据，每组数据一行，包含一个字符串，只包含左右括号和大小写字母，字符串长度不超过100。<br>注意：cin.getline(str,100)最多只能输入99个字符！</p>
<h5 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h5><p>对每组输出数据，输出两行，第一行包含原始输入字符，第二行由”$”,”?”和空格组成，”$”和”?”表示与之对应的左括号和右括号不能匹配。</p>
<h5 id="样例输入："><a href="#样例输入：" class="headerlink" title="样例输入："></a>样例输入：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">)(rttyy())sss)(</div></pre></td></tr></table></figure>
<h5 id="样例输出："><a href="#样例输出：" class="headerlink" title="样例输出："></a>样例输出：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">)(rttyy())sss)(</div><div class="line">?            ?$</div></pre></td></tr></table></figure>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; S;</div><div class="line"><span class="keyword">char</span> str[<span class="number">110</span>];</div><div class="line"><span class="keyword">char</span> res[<span class="number">110</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>, str) != EOF) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; str[i] != <span class="number">0</span>; i++) &#123;</div><div class="line">			<span class="keyword">if</span> (str[i] == <span class="string">'('</span>) &#123;</div><div class="line">				S.push(i);</div><div class="line">				res[i] = <span class="string">' '</span>;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">')'</span>) &#123;</div><div class="line">				<span class="keyword">if</span> (S.empty() == <span class="literal">false</span>) &#123;</div><div class="line">					S.pop();</div><div class="line">					res[i] = <span class="string">' '</span>;</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					res[i] = <span class="string">'?'</span>;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				res[i] = <span class="string">' '</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">while</span> (!S.empty()) &#123;</div><div class="line">			res[S.top()] = <span class="string">'$'</span>;</div><div class="line">			S.pop();</div><div class="line">		&#125;</div><div class="line">		res[i] = <span class="number">0</span>;</div><div class="line">		<span class="built_in">puts</span>(str);</div><div class="line">		<span class="built_in">puts</span>(res);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="简单计数器"><a href="#简单计数器" class="headerlink" title="简单计数器"></a>简单计数器</h4><h5 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h5><p>读入一个只包含 +, -, *, / 的非负整数计算表达式，计算该表达式的值。</p>
<h5 id="输入：-1"><a href="#输入：-1" class="headerlink" title="输入："></a>输入：</h5><p>测试输入包含若干测试用例，每个测试用例占一行，每行不超过200个字符，整数和运算符之间用一个空格分隔。没有非法表达式。当一行中只有0时输入结束，相应的结果不要输出。</p>
<h5 id="输出：-1"><a href="#输出：-1" class="headerlink" title="输出："></a>输出：</h5><p>对每个测试用例输出1行，即该表达式的值，精确到小数点后2位。</p>
<h5 id="样例输入：-1"><a href="#样例输入：-1" class="headerlink" title="样例输入："></a>样例输入：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1 + 2</div><div class="line">4 + 2 * 5 - 7 / 11</div><div class="line">0</div></pre></td></tr></table></figure>
<h5 id="样例输出：-1"><a href="#样例输出：-1" class="headerlink" title="样例输出："></a>样例输出：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">3.00</div><div class="line">13.36</div></pre></td></tr></table></figure>
<h5 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">double</span>&gt; digit;</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; op;</div><div class="line"><span class="keyword">char</span> str[<span class="number">110</span>];</div><div class="line"><span class="keyword">int</span> mat[][<span class="number">5</span>] = &#123;</div><div class="line">	<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</div><div class="line">	<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</div><div class="line">	<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</div><div class="line">	<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</div><div class="line">	<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">// reto is true =&gt; oparator</span></div><div class="line"><span class="comment">// reto is false =&gt; number</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getOp</span><span class="params">(<span class="keyword">bool</span> &amp;reto, <span class="keyword">int</span> &amp;retn, <span class="keyword">int</span> &amp;i)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; op.empty()) &#123;</div><div class="line">		reto = <span class="literal">true</span>;</div><div class="line">		retn = <span class="number">0</span>;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (str[i] == <span class="number">0</span>) &#123;</div><div class="line">		reto = <span class="literal">true</span>;</div><div class="line">		retn = <span class="number">0</span>;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (str[i] &gt;= <span class="string">'0'</span> &amp;&amp; str[i] &lt;= <span class="string">'9'</span>) &#123;</div><div class="line">		reto = <span class="literal">false</span>;</div><div class="line">		retn = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span> (; str[i] != <span class="string">' '</span> &amp;&amp; str[i] != <span class="number">0</span>; i++) &#123;</div><div class="line">			retn *= <span class="number">10</span>;</div><div class="line">			retn += str[i] - <span class="string">'0'</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (str[i] == <span class="string">' '</span>) &#123;</div><div class="line">			i++;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		reto = <span class="literal">true</span>;</div><div class="line">		<span class="keyword">if</span> (str[i] == <span class="string">'+'</span>) &#123;</div><div class="line">			retn = <span class="number">1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">'-'</span>) &#123;</div><div class="line">			retn = <span class="number">2</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">'*'</span>) &#123;</div><div class="line">			retn = <span class="number">3</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">'/'</span>) &#123;</div><div class="line">			retn = <span class="number">4</span>;</div><div class="line">		&#125;</div><div class="line">		i += <span class="number">2</span>;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">while</span> (gets_s(str)) &#123;</div><div class="line">		<span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">'0'</span> &amp;&amp; str[<span class="number">1</span>] == <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">bool</span> retop;</div><div class="line">		<span class="keyword">int</span> retnum;</div><div class="line">		<span class="keyword">int</span> idx = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span> (!op.empty()) &#123;</div><div class="line">			op.pop();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">while</span> (!digit.empty()) &#123;</div><div class="line">			digit.pop();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">			getOp(retop, retnum, idx);</div><div class="line">			<span class="keyword">if</span> (retop == <span class="literal">false</span>) &#123;</div><div class="line">				digit.push((<span class="keyword">double</span>)retnum);</div><div class="line">			&#125; </div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">double</span> tmp;</div><div class="line">				<span class="keyword">if</span> (op.empty() == <span class="literal">true</span> || mat[retnum][op.top()] == <span class="number">1</span>) &#123;</div><div class="line">					op.push(retnum);</div><div class="line">				&#125; </div><div class="line">				<span class="keyword">else</span> &#123;</div><div class="line">					<span class="keyword">while</span> (mat[retnum][op.top()] == <span class="number">0</span>) &#123;</div><div class="line">						<span class="keyword">int</span> ret = op.top();</div><div class="line">						op.pop();</div><div class="line">						<span class="keyword">double</span> b = digit.top();</div><div class="line">						digit.pop();</div><div class="line">						<span class="keyword">double</span> a = digit.top();</div><div class="line">						digit.pop();</div><div class="line">						<span class="keyword">if</span> (ret == <span class="number">1</span>) &#123;</div><div class="line">							tmp = a + b;</div><div class="line">						&#125; </div><div class="line">						<span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="number">2</span>) &#123;</div><div class="line">							tmp = a - b;</div><div class="line">						&#125; </div><div class="line">						<span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="number">3</span>) &#123;</div><div class="line">							tmp = a * b;</div><div class="line">						&#125; </div><div class="line">						<span class="keyword">else</span> &#123;</div><div class="line">							tmp = a / b;</div><div class="line">						&#125;</div><div class="line">						digit.push(tmp);</div><div class="line">					&#125;</div><div class="line">					op.push(retnum);</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (op.size() == <span class="number">2</span> &amp;&amp; op.top() == <span class="number">0</span>) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, digit.top());</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;栈是一种数据项按序排列的数据结构，只能在它的一端进行删除和插入。
    
    </summary>
    
      <category term="C++" scheme="http://blog.iamxcc.com/categories/C/"/>
    
    
      <category term="C++" scheme="http://blog.iamxcc.com/tags/C/"/>
    
      <category term="STL" scheme="http://blog.iamxcc.com/tags/STL/"/>
    
      <category term="栈" scheme="http://blog.iamxcc.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>日期类问题</title>
    <link href="http://blog.iamxcc.com/2016/08/15/%E6%97%A5%E6%9C%9F%E7%B1%BB%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.iamxcc.com/2016/08/15/日期类问题/</id>
    <published>2016-08-15T03:51:59.000Z</published>
    <updated>2016-08-18T16:01:13.053Z</updated>
    
    <content type="html"><![CDATA[<p>给两个日期怎么计算两者间的日期差数，其中还要考虑闰年。 <a id="more"></a> 闰年的判断规则是：当年数不能被100整除时若其能被4整除则为闰年，或者其能被400整除时也是闰年。有了这个规则，怎么写就简单了。</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="comment">// 定义宏判断是否为闰年</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ISYEAP(x) x%100 != 0 &amp;&amp; x%4 == 0 || x%400 == 0 </span></div><div class="line"></div><div class="line"><span class="keyword">int</span> dayOfMonth[<span class="number">13</span>][<span class="number">2</span>] = &#123;</div><div class="line">	<span class="number">0</span>, <span class="number">0</span>,</div><div class="line">	<span class="number">31</span>, <span class="number">31</span>,</div><div class="line">	<span class="number">28</span>, <span class="number">29</span>,</div><div class="line">	<span class="number">31</span>, <span class="number">31</span>,</div><div class="line">	<span class="number">30</span>, <span class="number">30</span>,</div><div class="line">	<span class="number">31</span>, <span class="number">31</span>,</div><div class="line">	<span class="number">30</span>, <span class="number">30</span>,</div><div class="line">	<span class="number">31</span>, <span class="number">31</span>,</div><div class="line">	<span class="number">31</span>, <span class="number">31</span>,</div><div class="line">	<span class="number">30</span>, <span class="number">30</span>,</div><div class="line">	<span class="number">31</span>, <span class="number">31</span>,</div><div class="line">	<span class="number">30</span>, <span class="number">30</span>,</div><div class="line">	<span class="number">31</span>, <span class="number">31</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">struct</span> Date &#123;</div><div class="line">	<span class="keyword">int</span> day;</div><div class="line">	<span class="keyword">int</span> month;</div><div class="line">	<span class="keyword">int</span> year;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">nextDay</span><span class="params">()</span> </span>&#123;</div><div class="line">		day++;</div><div class="line">		<span class="keyword">if</span> (day &gt; dayOfMonth[month][ISYEAP(year)]) &#123;</div><div class="line">			day = <span class="number">1</span>;</div><div class="line">			month++;</div><div class="line">			<span class="keyword">if</span> (month &gt; <span class="number">12</span>) &#123;</div><div class="line">				month = <span class="number">1</span>;</div><div class="line">				year++;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">int</span> buf[<span class="number">5001</span>][<span class="number">13</span>][<span class="number">32</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Abs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> x &lt; <span class="number">0</span> ? -x : x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	Date tmp;</div><div class="line">	<span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">// 计算日期与0000年1月1日的天数差</span></div><div class="line">	tmp.day = <span class="number">1</span>;</div><div class="line">	tmp.month = <span class="number">1</span>;</div><div class="line">	tmp.year = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (tmp.year != <span class="number">5001</span>) &#123;</div><div class="line">		buf[tmp.year][tmp.month][tmp.day] = count;</div><div class="line">		tmp.nextDay();</div><div class="line">		count++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> d1, m1, y1;</div><div class="line">	<span class="keyword">int</span> d2, m2, y2;</div><div class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%4d%2d%2d"</span>, &amp;y1, &amp;m1, &amp;d1) != EOF) &#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%4d%2d%2d"</span>, &amp;y2, &amp;m2, &amp;d2);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Abs(buf[y2][m2][d2] - buf[y1][m1][d1]) + <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面的代码可以看到buf是个三维数组而且还挺大的，所以我们把他定义为全局变量。如果将其定义在函数main中，那么函数所可以使用的栈空间将不足以提供如此庞大的内存，出现栈溢出。</p>
<p>有了这个模板，其他日期类的问题基本就可以解决了。</p>
<p>如给一个日期，输出星期几：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="comment">// 定义宏判断是否为闰年</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ISYEAP(x) x%100 != 0 &amp;&amp; x%4 == 0 || x%400 == 0 </span></div><div class="line"></div><div class="line"><span class="keyword">int</span> dayOfMonth[<span class="number">13</span>][<span class="number">2</span>] = &#123;</div><div class="line">	<span class="number">0</span>, <span class="number">0</span>,</div><div class="line">	<span class="number">31</span>, <span class="number">31</span>,</div><div class="line">	<span class="number">28</span>, <span class="number">29</span>,</div><div class="line">	<span class="number">31</span>, <span class="number">31</span>,</div><div class="line">	<span class="number">30</span>, <span class="number">30</span>,</div><div class="line">	<span class="number">31</span>, <span class="number">31</span>,</div><div class="line">	<span class="number">30</span>, <span class="number">30</span>,</div><div class="line">	<span class="number">31</span>, <span class="number">31</span>,</div><div class="line">	<span class="number">31</span>, <span class="number">31</span>,</div><div class="line">	<span class="number">30</span>, <span class="number">30</span>,</div><div class="line">	<span class="number">31</span>, <span class="number">31</span>,</div><div class="line">	<span class="number">30</span>, <span class="number">30</span>,</div><div class="line">	<span class="number">31</span>, <span class="number">31</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">struct</span> Date &#123;</div><div class="line">	<span class="keyword">int</span> day;</div><div class="line">	<span class="keyword">int</span> month;</div><div class="line">	<span class="keyword">int</span> year;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">nextDay</span><span class="params">()</span> </span>&#123;</div><div class="line">		day++;</div><div class="line">		<span class="keyword">if</span> (day &gt; dayOfMonth[month][ISYEAP(year)]) &#123;</div><div class="line">			day = <span class="number">1</span>;</div><div class="line">			month++;</div><div class="line">			<span class="keyword">if</span> (month &gt; <span class="number">12</span>) &#123;</div><div class="line">				month = <span class="number">1</span>;</div><div class="line">				year++;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">int</span> buf[<span class="number">3001</span>][<span class="number">13</span>][<span class="number">32</span>];</div><div class="line"><span class="keyword">char</span> monthName[<span class="number">13</span>][<span class="number">20</span>] = &#123;</div><div class="line">	<span class="string">""</span>,</div><div class="line">	<span class="string">"January"</span>,</div><div class="line">	<span class="string">"February"</span>,</div><div class="line">	<span class="string">"March"</span>,</div><div class="line">	<span class="string">"April"</span>,</div><div class="line">	<span class="string">"May"</span>,</div><div class="line">	<span class="string">"June"</span>,</div><div class="line">	<span class="string">"July"</span>,</div><div class="line">	<span class="string">"August"</span>,</div><div class="line">	<span class="string">"September"</span>,</div><div class="line">	<span class="string">"October"</span>,</div><div class="line">	<span class="string">"November"</span>,</div><div class="line">	<span class="string">"December"</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">char</span> weekName[<span class="number">7</span>][<span class="number">20</span>] = &#123;</div><div class="line">	<span class="string">"Sunday"</span>,</div><div class="line">	<span class="string">"Monday"</span>,</div><div class="line">	<span class="string">"Tuesday"</span>,</div><div class="line">	<span class="string">"Wednesday"</span>,</div><div class="line">	<span class="string">"Thursday"</span>,</div><div class="line">	<span class="string">"Friday"</span>,</div><div class="line">	<span class="string">"Saturday"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	Date tmp;</div><div class="line">	<span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">// 计算日期与0000年1月1日的天数差</span></div><div class="line">	tmp.day = <span class="number">1</span>;</div><div class="line">	tmp.month = <span class="number">1</span>;</div><div class="line">	tmp.year = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (tmp.year != <span class="number">3001</span>) &#123;</div><div class="line">		buf[tmp.year][tmp.month][tmp.day] = count;</div><div class="line">		tmp.nextDay();</div><div class="line">		count++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> d, m, y;</div><div class="line">	<span class="keyword">char</span> s[<span class="number">20</span>];</div><div class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%s%d"</span>, &amp;d, s, &amp;y) != EOF) &#123;</div><div class="line">		<span class="keyword">for</span> (m = <span class="number">1</span>; m &lt;= <span class="number">12</span>; m++) &#123;</div><div class="line">			<span class="keyword">if</span> (<span class="built_in">strcmp</span>(s, monthName[m]) == <span class="number">0</span>) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> days = buf[y][m][d] - buf[<span class="number">2016</span>][<span class="number">8</span>][<span class="number">15</span>];</div><div class="line">		days++;</div><div class="line"></div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, weekName[(days%<span class="number">7</span> + <span class="number">7</span>) % <span class="number">7</span>]);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给两个日期怎么计算两者间的日期差数，其中还要考虑闰年。
    
    </summary>
    
      <category term="算法" scheme="http://blog.iamxcc.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://blog.iamxcc.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C和C++结构体的区别</title>
    <link href="http://blog.iamxcc.com/2016/08/15/C%E5%92%8CC-%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://blog.iamxcc.com/2016/08/15/C和C-结构体的区别/</id>
    <published>2016-08-15T02:55:24.000Z</published>
    <updated>2016-08-18T16:00:35.173Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习C++，发现它的结构体使用起来比C语言的结构体还要方便一些。具体的区别如下: <a id="more"></a></p>
<h5 id="1-C结构体变量定义时-若为struct-结构体名-变量名-struct不能省-而C-中则可以省去struct"><a href="#1-C结构体变量定义时-若为struct-结构体名-变量名-struct不能省-而C-中则可以省去struct" class="headerlink" title="1.C结构体变量定义时,若为struct  结构体名 变量名, struct不能省,而C++中则可以省去struct."></a>1.C结构体变量定义时,若为<code>struct  结构体名 变量名</code>, <code>struct</code>不能省,而C++中则可以省去<code>struct</code>.</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// C</span></div><div class="line"><span class="keyword">struct</span> Node &#123;</div><div class="line">	<span class="keyword">int</span> val;</div><div class="line">	Node *next;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">struct</span> Node p; <span class="comment">// 定义结构变量</span></div><div class="line"><span class="keyword">struct</span> Node *p1; <span class="comment">// 定义结构指针</span></div></pre></td></tr></table></figure>
<p>可以看到其中的struct都不可以省略，如果想要省略还需要加上<code>typedef</code>。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// C</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Node &#123;</div><div class="line">	<span class="keyword">int</span> val;</div><div class="line">	Node *next;</div><div class="line">&#125;Node;</div><div class="line">Node p; <span class="comment">// 定义结构变量</span></div><div class="line">Node *p1; <span class="comment">// 定义结构指针</span></div></pre></td></tr></table></figure></p>
<p>加上<code>typedef</code>之后，就可以直接声明变量了。然而在C++中是可以直接声明的。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// C++</span></div><div class="line"><span class="keyword">struct</span> Node &#123;</div><div class="line">	<span class="keyword">int</span> val;</div><div class="line">	Node *next;</div><div class="line">&#125;;</div><div class="line">Node p; <span class="comment">// 定义结构变量</span></div><div class="line">Node *p1; <span class="comment">// 定义结构指针</span></div></pre></td></tr></table></figure></p>
<p>可以看到C++还是方便一些的。</p>
<h5 id="2-C-结构体中只能定义成员变量-而不能定义成员函数-而C-结构体则可以有成员变量也可以定义成员函数"><a href="#2-C-结构体中只能定义成员变量-而不能定义成员函数-而C-结构体则可以有成员变量也可以定义成员函数" class="headerlink" title="2.C 结构体中只能定义成员变量,而不能定义成员函数,.而C++结构体则可以有成员变量也可以定义成员函数."></a>2.C 结构体中只能定义成员变量,而不能定义成员函数,.而C++结构体则可以有成员变量也可以定义成员函数.</h5><h5 id="3-C-结构体中只能定义成员变量-而不能定义成员函数-而C-结构体则可以有成员变量也可以定义成员函数"><a href="#3-C-结构体中只能定义成员变量-而不能定义成员函数-而C-结构体则可以有成员变量也可以定义成员函数" class="headerlink" title="3.C 结构体中只能定义成员变量,而不能定义成员函数,.而C++结构体则可以有成员变量也可以定义成员函数."></a>3.C 结构体中只能定义成员变量,而不能定义成员函数,.而C++结构体则可以有成员变量也可以定义成员函数.</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习C++，发现它的结构体使用起来比C语言的结构体还要方便一些。具体的区别如下:
    
    </summary>
    
      <category term="C++" scheme="http://blog.iamxcc.com/categories/C/"/>
    
    
      <category term="C" scheme="http://blog.iamxcc.com/tags/C/"/>
    
      <category term="C++" scheme="http://blog.iamxcc.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>排序实例</title>
    <link href="http://blog.iamxcc.com/2016/08/14/%E6%8E%92%E5%BA%8F%E5%AE%9E%E4%BE%8B/"/>
    <id>http://blog.iamxcc.com/2016/08/14/排序实例/</id>
    <published>2016-08-14T13:37:31.000Z</published>
    <updated>2016-08-14T13:53:34.292Z</updated>
    
    <content type="html"><![CDATA[<p>今天发现使用C++的sort比C的qsort还要方便一些，为了说明sort的使用方法，这里使用一个实例来说明。<a id="more"></a></p>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>有N个学生的数据，将学生数据按成绩高低排序，如果成绩相同则按姓名字符的字母序排序，如果姓名的字母序也相同则按照学生的年龄排序，并输出N个学生排序后的信息。</p>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>测试数据有多组，每组输入第一行有一个整数N（N&lt;=1000），接下来的N行包括N个学生的数据。<br>每个学生的数据包括姓名（长度不超过100的字符串）、年龄（整形数）、成绩（小于等于100的正数）。</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>将学生信息按成绩进行排序，成绩相同的则按姓名的字母序进行排序。<br>然后输出学生信息，按照如下格式：<br><code>姓名 年龄 成绩</code></p>
<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><blockquote>
<p>3<br>abc 20 99<br>bcd 19 97<br>bed 20 97</p>
</blockquote>
<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><blockquote>
<p>bcd 19 97<br>bed 20 97<br>abc 20 99</p>
</blockquote>
<p><strong>提示：</strong><br>学生姓名的字母序区分字母的大小写，如A要比a的字母序靠前(因为A的ASC码比a的ASC码要小)。</p>
<p><strong>来源：</strong><br>2000年清华大学计算机研究生机试真题</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Student &#123;</div><div class="line">	<span class="keyword">char</span> name[<span class="number">101</span>];</div><div class="line">	<span class="keyword">int</span> age;</div><div class="line">	<span class="keyword">int</span> score;</div><div class="line">&#125; buf[<span class="number">1000</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(Student a, Student b)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (a.score != b.score) &#123;</div><div class="line">		<span class="keyword">return</span> a.score &gt; b.score;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> tmp = <span class="built_in">strcmp</span>(a.name, b.name);</div><div class="line">	<span class="keyword">if</span> (tmp != <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> tmp &gt; <span class="number">0</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> a.age &gt; b.age;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> size;</div><div class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;size) != EOF) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%s%d%d"</span>, buf[i].name, &amp;buf[i].age, &amp;buf[i].score);</div><div class="line">		&#125;</div><div class="line">		sort(buf, buf + size, cmp);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%s %d %d\n"</span>, buf[i].name, buf[i].age, buf[i].score);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>#define _CRT_SECURE_NO_WARNINGS</code> 是为了防止VS2015对于<code>scanf</code>的报错, 可以看到<code>sort</code>比<code>qsort</code>函数少了一个参数。而<code>cmp</code>函数是对于结构体的比较作出规定。<code>cmp</code>的编写基本最复杂的就是结构体的规则编写了，弄懂了基本其他的<code>整型</code>、<code>字符</code>、<code>字符串</code>等等的比较也会了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天发现使用C++的sort比C的qsort还要方便一些，为了说明sort的使用方法，这里使用一个实例来说明。
    
    </summary>
    
      <category term="算法" scheme="http://blog.iamxcc.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://blog.iamxcc.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>VS2015中使用scanf报错</title>
    <link href="http://blog.iamxcc.com/2016/08/14/VS2015%E4%B8%AD%E4%BD%BF%E7%94%A8scanf%E6%8A%A5%E9%94%99/"/>
    <id>http://blog.iamxcc.com/2016/08/14/VS2015中使用scanf报错/</id>
    <published>2016-08-14T10:30:48.000Z</published>
    <updated>2016-08-14T10:45:44.553Z</updated>
    
    <content type="html"><![CDATA[<p>今天使用VS2015编译C文件时，发现scanf报错了，提示我们使用scanf_s替代scanf。如果我们坚持要使用scanf，那怎么办呢？ <a id="more"></a></p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ol>
<li><p>方法一：在程序最前面加#define _CRT_SECURE_NO_DEPRECATE；</p>
</li>
<li><p>方法二：在程序最前面加#define _CRT_SECURE_NO_WARNINGS；</p>
</li>
<li><p>方法三：在程序最前面加#pragma warning(disable:4996)；</p>
</li>
<li><p>方法四：把scanf改为scanf_s；</p>
</li>
<li><p>方法五：无需在程序最前面加那行代码，只需在新建项目时取消勾选“SDL检查”即可；</p>
</li>
<li><p>方法六：若项目已建立好，在项目属性里关闭SDL也行；</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天使用VS2015编译C文件时，发现scanf报错了，提示我们使用scanf_s替代scanf。如果我们坚持要使用scanf，那怎么办呢？
    
    </summary>
    
      <category term="VS2015" scheme="http://blog.iamxcc.com/categories/VS2015/"/>
    
    
      <category term="VS2015" scheme="http://blog.iamxcc.com/tags/VS2015/"/>
    
      <category term="IDE" scheme="http://blog.iamxcc.com/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>jquery插件实现萤火虫效果</title>
    <link href="http://blog.iamxcc.com/2016/08/13/jquery%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0%E8%90%A4%E7%81%AB%E8%99%AB%E6%95%88%E6%9E%9C/"/>
    <id>http://blog.iamxcc.com/2016/08/13/jquery插件实现萤火虫效果/</id>
    <published>2016-08-13T05:52:51.000Z</published>
    <updated>2016-08-13T06:25:26.905Z</updated>
    
    <content type="html"><![CDATA[<p>如果博客页面是黑色的，可以添加一些萤火虫效果在上面，从而显得不那么单调。<a id="more"></a></p>
<p>源码在<a href="https://github.com/iamxcc/jquery-firefly" target="_blank" rel="external">jQuery-firefly</a>上，支持一下。</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>直接在页面上添加上这两行代码即可，不过记得要在jquery之下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"firefly.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">$(document).firefly();</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果博客页面是黑色的，可以添加一些萤火虫效果在上面，从而显得不那么单调。
    
    </summary>
    
      <category term="jQuery" scheme="http://blog.iamxcc.com/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="http://blog.iamxcc.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>git推送文件到github步骤</title>
    <link href="http://blog.iamxcc.com/2016/08/13/git%E6%8E%A8%E9%80%81%E6%96%87%E4%BB%B6%E5%88%B0github%E6%AD%A5%E9%AA%A4/"/>
    <id>http://blog.iamxcc.com/2016/08/13/git推送文件到github步骤/</id>
    <published>2016-08-13T03:41:50.000Z</published>
    <updated>2016-08-13T06:33:11.945Z</updated>
    
    <content type="html"><![CDATA[<p>每次想用git推送文件到github时，总是忘记那几个命令，如果出错还不知道是怎么回事。所以在这里做个记录，方便下次翻阅。<a id="more"></a></p>
<h3 id="推送到新的仓库"><a href="#推送到新的仓库" class="headerlink" title="推送到新的仓库"></a>推送到新的仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"# hexo-source"</span> &gt;&gt; README.md</div><div class="line">git init</div><div class="line">git add README.md</div><div class="line">git commit -m <span class="string">"first commit"</span></div><div class="line">git remote add origin git@github.com:iamxcc/hexo-source.git</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<h3 id="推送到已有仓库"><a href="#推送到已有仓库" class="headerlink" title="推送到已有仓库"></a>推送到已有仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m <span class="string">"first commit"</span></div><div class="line">git remote add origin git@github.com:iamxcc/hexo-source.git</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<p>如果已经推送过了，那么可以省略<code>git remote add origin git@github.com:iamxcc/hexo-source.git</code>这句。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次想用git推送文件到github时，总是忘记那几个命令，如果出错还不知道是怎么回事。所以在这里做个记录，方便下次翻阅。
    
    </summary>
    
      <category term="Git" scheme="http://blog.iamxcc.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://blog.iamxcc.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>PAT(Basic Level) 1001: 害死人不偿命的(3n+1)猜想</title>
    <link href="http://blog.iamxcc.com/2016/08/10/PAT-Basic-Level-1001-%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%84-3n-1-%E7%8C%9C%E6%83%B3/"/>
    <id>http://blog.iamxcc.com/2016/08/10/PAT-Basic-Level-1001-害死人不偿命的-3n-1-猜想/</id>
    <published>2016-08-10T12:05:49.000Z</published>
    <updated>2016-08-10T15:39:58.142Z</updated>
    
    <content type="html"><![CDATA[<p>卡拉兹(Callatz)猜想：对任何一个自然数n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把(3n+1)砍掉一半。<a id="more"></a> 这样一直反复砍下去，最后一定在某一步得到n=1。卡拉兹在1950年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证(3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p>
<p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过1000的正整数n，简单地数一下，需要多少步（砍几下）才能得到n=1？</p>
<p>输入格式：每个测试输入包含1个测试用例，即给出自然数n的值。</p>
<p>输出格式：输出从n计算到1需要的步数。</p>
<p>输入样例：<br>3<br>输出样例：<br>5</p>
<h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</div><div class="line">	<span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span> (num != <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">			num /= <span class="number">2</span>;</div><div class="line">			count++;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			num = (num * <span class="number">3</span> + <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">			count++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d/n"</span>, count);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;卡拉兹(Callatz)猜想：对任何一个自然数n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把(3n+1)砍掉一半。
    
    </summary>
    
      <category term="PAT" scheme="http://blog.iamxcc.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="http://blog.iamxcc.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>L1-002: 打印沙漏</title>
    <link href="http://blog.iamxcc.com/2016/08/10/L1-002-%E6%89%93%E5%8D%B0%E6%B2%99%E6%BC%8F/"/>
    <id>http://blog.iamxcc.com/2016/08/10/L1-002-打印沙漏/</id>
    <published>2016-08-10T11:00:27.000Z</published>
    <updated>2016-08-10T14:19:24.680Z</updated>
    
    <content type="html"><![CDATA[<p>本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印 <a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*****</div><div class="line"> ***</div><div class="line">  *</div><div class="line"> ***</div><div class="line">*****</div></pre></td></tr></table></figure></p>
<p>所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。</p>
<p>给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。</p>
<p>输入格式：</p>
<p>输入在一行给出1个正整数N（&lt;=1000）和一个符号，中间以空格分隔。</p>
<p>输出格式：</p>
<p>首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">输入样例：</div><div class="line">19 *</div><div class="line">输出样例：</div><div class="line">*****</div><div class="line"> ***</div><div class="line">  *</div><div class="line"> ***</div><div class="line">*****</div><div class="line">2</div></pre></td></tr></table></figure></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">	<span class="keyword">char</span> symbol;</div><div class="line">	<span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> times = <span class="number">0</span>;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %c"</span>, &amp;num, &amp;symbol);</div><div class="line">	max = <span class="built_in">sqrt</span>(<span class="number">2</span>*(num + <span class="number">1</span>)) - <span class="number">1</span>;</div><div class="line">	max = (max % <span class="number">2</span>) == <span class="number">0</span> ? max - <span class="number">1</span> : max;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; max; j++) &#123;</div><div class="line">			<span class="keyword">int</span> temp = i &gt; max / <span class="number">2</span> ? (max - i - <span class="number">1</span>) : i;</div><div class="line">			<span class="keyword">if</span> (temp &lt;= j &amp;&amp; j &lt;= max - <span class="number">1</span> - temp) &#123;</div><div class="line">				<span class="built_in">printf</span>(<span class="string">"%c"</span>, symbol);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (j &gt; max - <span class="number">1</span> - temp) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> left = <span class="built_in">pow</span>((max + <span class="number">1</span>), <span class="number">2</span>) / <span class="number">2</span> - <span class="number">1</span>;</div><div class="line">	left = left &gt; <span class="number">0</span> ? left : <span class="number">0</span>;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num - left);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印
    
    </summary>
    
      <category term="PAT" scheme="http://blog.iamxcc.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="http://blog.iamxcc.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>Chrome52中Mactype无效怎么回退版本</title>
    <link href="http://blog.iamxcc.com/2016/08/10/Chrome52%E4%B8%ADMactype%E6%97%A0%E6%95%88%E6%80%8E%E4%B9%88%E5%9B%9E%E9%80%80%E7%89%88%E6%9C%AC/"/>
    <id>http://blog.iamxcc.com/2016/08/10/Chrome52中Mactype无效怎么回退版本/</id>
    <published>2016-08-10T02:18:59.000Z</published>
    <updated>2016-08-10T02:28:44.914Z</updated>
    
    <content type="html"><![CDATA[<p>今天在chrome自动更新到523版本后，突然被chrome上显示的字体吓了一下，还以为什么坏了。后来才发现是mactype无效了，因为Chrome52后禁用DirectWrite渲染的选项已经没有了。<a id="more"></a> </p>
<p>没有办法只能去找各种各样的解决办法，先是试了stylish的方式，效果不明显。后来又去找mactype有没有新的版本。一直折腾了好久后，终于下定决心把chrome回退到上一个版本。 </p>
<p>可是怎么回退呢？卸载掉再重新装吗？<br>答案是不用这么麻烦。下面是解决办法，来自知乎 <a href="https://www.zhihu.com/people/zhen-ming-36-24" target="_blank" rel="external">Dorawei</a>：<br>C:\Program Files (x86)\Google\Chrome\Temp\ 下的一个文件夹中有old_chrome.exe，把它复制到C:\Program Files (x86)\Google\Chrome\Application 中改为 chrome.exe 就可以返回上一版了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在chrome自动更新到523版本后，突然被chrome上显示的字体吓了一下，还以为什么坏了。后来才发现是mactype无效了，因为Chrome52后禁用DirectWrite渲染的选项已经没有了。
    
    </summary>
    
      <category term="Mactype" scheme="http://blog.iamxcc.com/categories/Mactype/"/>
    
    
      <category term="Mactype" scheme="http://blog.iamxcc.com/tags/Mactype/"/>
    
      <category term="Chrome" scheme="http://blog.iamxcc.com/tags/Chrome/"/>
    
      <category term="Win10" scheme="http://blog.iamxcc.com/tags/Win10/"/>
    
  </entry>
  
  <entry>
    <title>趣说KMP算法</title>
    <link href="http://blog.iamxcc.com/2016/08/06/%E8%B6%A3%E8%AF%B4KMP%E7%AE%97%E6%B3%95/"/>
    <id>http://blog.iamxcc.com/2016/08/06/趣说KMP算法/</id>
    <published>2016-08-06T11:59:24.000Z</published>
    <updated>2016-08-06T12:04:51.241Z</updated>
    
    <content type="html"><![CDATA[<p>今天逛知乎时，发现了一个比较浅显易懂的KMP算法解释。故在此做个笔记 <a id="more"></a>。作者信息如下：<br>作者：逍遥行<br>链接：<a href="https://www.zhihu.com/question/21923021/answer/37475572" target="_blank" rel="external">https://www.zhihu.com/question/21923021/answer/37475572</a><br>来源：知乎<br>著作权归作者所有，转载请联系作者获得授权。</p>
<p>甲：abbaabbaaba<br>在里面寻找<br>乙：abbaaba<br>发现第 7 个字符不匹配。<br>这时候甲把乙叫走了，说你先一边玩去，我自己研究下。<br>然后甲想，自己已经知道乙的前 6 个字符就是自己的前 6 个字符，不妨先「自己与自己匹配一番」。<br>然后甲先用 abbaab 这 6 个已知的字符去匹配自身，错 1 个位，发现第一个就不一样（不匹配），然后错 2 个位，还是不匹配。<br>当错 3 个位的时候，甲发现匹配了一个 a，但是第二个 b 不匹配。<br>当错 4 个位的时候，匹配了两个。错 5 个位不匹配。后面的东西甲就不知道了，因为他只知道前 6 个字符。<br>（注：实际的匹配个数是字符串 [0…i] 的后缀与前缀的最长公共长度）</p>
<p>随后，甲把乙叫了过来：<br>「我已经知道你下一次匹配开始的位置了，来，让你的头部对齐我的第 5 个字符，然后从你的第 3 个字符开始继续匹配我吧！」</p>
<p>关键的地方，在于不要让乙「前功尽弃」——已经匹配了 6 个了，还差一个就结束了，这时不匹配导致从 0 开始，多可惜啊！<br>现在我告诉你，在不匹配的情况下，你仍然已经匹配了 2 个（乙内心：还好不是 0），并且你可以继续从不匹配的地方开始比较，即用你的 3 个字符与我继续匹配。<br>那，这个 2 你是怎么算的？<br>我在你来之前就算好啦！<br>我先与自己进行匹配（预处理），对每个位置，找「当前位置往前看的最长字符串，它与我的前缀匹配」（当然这个字符串不能是前缀），这个最长字符串的长度，在学术上称作「失配函数」。<br>UCCU，从你的第 6 个位置往前看，恰好 [ab] 与你的前缀 [ab] 匹配，但是我的第 7 个字符并不知道你的第 3 个字符是否与我一样，所以你直接从这里开始继续匹配我。</p>
<p>以上为 KMP 的基本思想，关键在于失配函数的计算，网上的代码很多，这里有个很好的例子你仔细体会下：ababzababa，注意最后一个失配函数的值为 3。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天逛知乎时，发现了一个比较浅显易懂的KMP算法解释。故在此做个笔记
    
    </summary>
    
      <category term="算法" scheme="http://blog.iamxcc.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="KMP算法" scheme="http://blog.iamxcc.com/tags/KMP%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>OSI模型与TCP/IP模型</title>
    <link href="http://blog.iamxcc.com/2016/08/06/OSI%E6%A8%A1%E5%9E%8B%E4%B8%8ETCP-IP%E6%A8%A1%E5%9E%8B/"/>
    <id>http://blog.iamxcc.com/2016/08/06/OSI模型与TCP-IP模型/</id>
    <published>2016-08-06T09:20:25.000Z</published>
    <updated>2016-08-06T09:28:19.600Z</updated>
    
    <content type="html"><![CDATA[<p>今天重新温习了一篇OSI模型与TCP/IP模型的知识，发现很多知识点又忘记了。所以，在此记录一下，方便下次查阅。<a id="more"></a></p>
<h2 id="OSI模型"><a href="#OSI模型" class="headerlink" title="OSI模型"></a>OSI模型</h2><p>从低到高：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。</p>
<h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><p>并不是指物理设备或者物理媒体。而是有关物理设备通过物理媒体进行互联的描述和规定。该层定义了接口的机械特性、电气特性、功能特性、规程特性等4个基本特性。物理层以比特流的方式传送来自数据链路层的数据，而不去理会数据的含义和格式。同样，接收数据后直接传给数据链路层。</p>
<h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h3><p>负责通过物理层从一台计算机到另外一台计算机无差错的传输数据帧，允许网络层通过网络连接进行虚拟无差错的传输。通常，数据链路层发送数据帧之后，等待接收方进行确认。接收方数据链路层检测帧传输过程中产生的任何问题。没有经过确认和损坏的帧都需要重传。</p>
<h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>负责信息寻址和将逻辑地址转换为物理地址。在网络层，数据传递单位是包。网络层的任务是选择合适的路径转发数据包。使发送方的数据包能够正确无误的按地址寻找到接收方的路径。并将数据包交给接收方。网络中两点之间可以到达的路径可能有很多，在选择最快捷、花费最低的路径时必须考虑网络拥塞程度、服务质量、线路的花费和线路的有效性。总的来说，网络层负责选择最佳路径。</p>
<p>网络层还能够协调发送、传输及接收设备的能力不平衡问题。如网络层对数据进行分段和重组，使得数据的长度能够满足该网络下层数据链路锁支持的最大数据帧MTU的长度。还需要考虑网络层不同网络协议之间的相互连接问题。</p>
<h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>传输层的功能是保证在不同子网的两台设备间数据包可靠、顺序、无错的传输。在传输层，数据传输单位是段。传输层负责处理端对端通信，即一个终端到另一个终端的通信，中间可以有多个交换节点。传输层向高层用户提供端到端的可靠的透明传输服务，为不同进程间的数据交换提供可靠的传输手段。在传输层的一个很重要的工作是数据的分段和重组，即把一个上层数据切割成更小的逻辑片和物理片。发送方在传输层把上层交给它的较大的数据进行分段后分别交给网络层进行独立输出，从而在传输层实现流量控制，提高网络资源的利用率。接收方收到数据后重组。传输层可以将收到的乱序数据包重新排序，并验证是否收到所有分组。</p>
<h3 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h3><p>会话层是利用传输层提供的端到端的服务，向表示层或会话用户提供会话服务。会话层主要功能是在两个节点之间建立、维护、释放面向用户的连接，并对会话进行管理和控制，保证会话数据可靠传送。会话层的连接与传输层的连接有1对1、1对多、多对1的关系。会话工程中，会话层需要决定到底使用全双工通信还是半双工通信。如果采用全双工，会话层的对话管理工作就很少。如果采用半双工，会话层则通过一个数据令牌来协调会话。保证每次只有一个用户能够传输数据。会话层提供同步服务，通过在数据流中定义检查点来把会话分割成明显的会话单元。当网络出故障时，从最后一个检查点开始重传数据。SQL、RPC(远程进程呼叫)都属于该层协议。</p>
<h3 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h3><p>表示层专门负责有关网络中计算机信息表示方式的问题。表示层在不同的数据格式之间进行数据转换，实现不同计算机之间的信息交换。除了编码，还包括数组、浮点数、记录、图像、声音等。表示层还负责数据的加密。文件的压缩，降低传输费用。</p>
<h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>直接与用户和应用程序打交道。负责对软件提供接口以使程序可以使用网络。Telnet(虚拟终端协议)、SMTP(简单邮件传输协议)、SNMP(简单网络管理协议)、DNS(域名系统)和超文本传输协议(HTTP)。</p>
<h2 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP/IP模型"></a>TCP/IP模型</h2><p>从低到高：网络接口层、网络层、传输层、应用层。</p>
<p>各层主要功能大致与OSI相对应。</p>
<p><strong>应用层协议：</strong>HTTP、FTP、SMTP、DNS。</p>
<p><strong>传输层协议：</strong>TCP、UDP。</p>
<p><strong>网络层协议：</strong>IP、ARP、ICMP(因特网控制消息协议)、RARP(反向地址解释协议)。</p>
<p><strong>网络接口层：</strong>Ethrenet、令牌环、帧中继、ISDN和分组交换网X.25。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天重新温习了一篇OSI模型与TCP/IP模型的知识，发现很多知识点又忘记了。所以，在此记录一下，方便下次查阅。
    
    </summary>
    
      <category term="计算机网络" scheme="http://blog.iamxcc.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://blog.iamxcc.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>C语言实现strlen函数的方法</title>
    <link href="http://blog.iamxcc.com/2016/08/05/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0strlen%E5%87%BD%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.iamxcc.com/2016/08/05/C语言实现strlen函数的方法/</id>
    <published>2016-08-05T13:42:17.000Z</published>
    <updated>2016-08-05T13:51:29.610Z</updated>
    
    <content type="html"><![CDATA[<p>不使用中间变量求const字符串长度，即实现求字符串长度库函数strlen函数。函数接口声明如下：int strlen(const char *p)； <a id="more"></a></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>在字符串中通常可以利用最后一个结束符’\0’，但此处参数为const，只读，那么我们不能打他的主意。<br>函数运行过程中不占用内存基本不可能，除非都使用了寄存器。“不使用中间变量”只是说程序员不能显示的申请内存而已，即不能有局部变量或者动态内存申请。如果函数自动申请栈内存或者使用寄存器存储变量，或者使用立即数寻址即常量，那么就相当于“不使用中间变量”。<br>从函数原型看，返回值为int，那么在函数内部必定需要一个地方存储这个值，要么是常数要么是寄存器。长度不为1时不能一次就求出来，说明必须有递归调用，这样递归时函数会自动申请栈内存，这样就相当于程序员“不使用中间变量”了。中间返回的值通过寄存器自动保存，最后一次返回时拷贝到int中去。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mStrlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mStrlen1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mStrlen2</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> *str=<span class="literal">NULL</span>;</div><div class="line">    str = <span class="string">"Hello Jay!"</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"original strlen():%d\n"</span>,<span class="built_in">strlen</span>(str));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"myStrlen():%d\n"</span>,myStrlen(str));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"myStrlen1():%d\n"</span>,myStrlen1(str));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"myStrlen2():%d\n"</span>,myStrlen2(str));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mStrlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span>   <span class="comment">// 不用中间变量，用递归实现，很容易看懂</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ( (str == <span class="literal">NULL</span>) || (*str == <span class="string">'\0'</span>) ) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> myStrlen(str+<span class="number">1</span>)+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mStrlen1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span>  <span class="comment">// 不用中间变量，也是用递归实现，写得更简洁而已</span></span></div><div class="line">&#123;</div><div class="line">    assert(str != <span class="literal">NULL</span>);</div><div class="line">    <span class="keyword">return</span> *str ? (myStrlen1(++str) + <span class="number">1</span>) : <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mStrlen2</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span>  <span class="comment">// 使用了一个int型变量</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(str==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(; *str++ != <span class="string">'\0'</span>; )</div><div class="line">    &#123;</div><div class="line">        len++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> len;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不使用中间变量求const字符串长度，即实现求字符串长度库函数strlen函数。函数接口声明如下：int strlen(const char *p)；
    
    </summary>
    
      <category term="C语言" scheme="http://blog.iamxcc.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C语言" scheme="http://blog.iamxcc.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
</feed>
