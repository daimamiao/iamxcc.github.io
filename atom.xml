<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡闹的日子</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.iamxcc.com/"/>
  <updated>2016-08-08T08:52:14.614Z</updated>
  <id>http://blog.iamxcc.com/</id>
  
  <author>
    <name>XCC</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 319: Bulb Switcher</title>
    <link href="http://blog.iamxcc.com/2016/08/08/LeetCode-319-Bulb-Switcher/"/>
    <id>http://blog.iamxcc.com/2016/08/08/LeetCode-319-Bulb-Switcher/</id>
    <published>2016-08-08T08:15:41.000Z</published>
    <updated>2016-08-08T08:52:14.614Z</updated>
    
    <content type="html"><![CDATA[<p>There are n bulbs that are initially off. You first turn on all the bulbs. Then, you turn off every second bulb. <a id="more"></a>  On the third round, you toggle every third bulb (turning on if it’s off or turning off if it’s on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb. Find how many bulbs are on after n rounds.</p>
<p>Example:</p>
<blockquote>
<p>Given n = 3.<br>At first, the three bulbs are [off, off, off].<br>After first round, the three bulbs are [on, on, on].<br>After second round, the three bulbs are [on, off, on].<br>After third round, the three bulbs are [on, off, off].<br>So you should return 1, because there is only one bulb is on.</p>
</blockquote>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>用数学的方法来思考这道题，会发现很简单。首先，决定一盏灯最后的亮灭取决于她所处在的序号。比如，6号灯最后一定是灭的，为什么呢？因为在n次操作中，只有她的因数次才能切换她的亮灭，比如第1次、第2次、第3次、第6次操作，又第1次是开，那么低6次后，她就灭了。所以要想亮，那么这个数要为有奇数个因数的数才行，而我们知道只有能开平方的数，有奇数个因数，因为她有一个不是成对出现的因数。所以要知道最后有几个灯是亮的，只要找到有几个小于n的能开平方数的数即可。而要计算一个数之下有多少小于或等于它的平方数，使用一个开平方用的函数就可以了。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bulbSwitch</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(n);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;There are n bulbs that are initially off. You first turn on all the bulbs. Then, you turn off every second bulb.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://blog.iamxcc.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 9: Palindrome Number</title>
    <link href="http://blog.iamxcc.com/2016/08/08/LeetCode-9-Palindrome-Number/"/>
    <id>http://blog.iamxcc.com/2016/08/08/LeetCode-9-Palindrome-Number/</id>
    <published>2016-08-08T07:52:04.000Z</published>
    <updated>2016-08-08T07:54:48.313Z</updated>
    
    <content type="html"><![CDATA[<p>Determine whether an integer is a palindrome. Do this without extra space. <a id="more"></a></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x!=<span class="number">0</span> &amp;&amp; x%<span class="number">10</span>==<span class="number">0</span>)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x &gt; sum) &#123;</div><div class="line">        sum = sum*<span class="number">10</span> + x%<span class="number">10</span>;</div><div class="line">        x /= <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (x==sum)||(x==sum/<span class="number">10</span>);</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Determine whether an integer is a palindrome. Do this without extra space.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://blog.iamxcc.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 231: Power of Two</title>
    <link href="http://blog.iamxcc.com/2016/08/08/LeetCode-231-Power-of-Two/"/>
    <id>http://blog.iamxcc.com/2016/08/08/LeetCode-231-Power-of-Two/</id>
    <published>2016-08-08T07:33:15.000Z</published>
    <updated>2016-08-08T07:56:22.033Z</updated>
    
    <content type="html"><![CDATA[<p>这个题跟<code>Power of Three</code>的思路基本一模一样，解法也差不多。但是因为是2啊，毕竟是计算机的进制数，所以<code>&amp;</code>,<code>|</code>这些位操作总能出奇迹。<br><a id="more"></a></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们可以列几个2的次幂数就可以发现，他们的二进制数的最高位为1，其他位都是0。所以让她与比她小的一个数的数做一下位与<code>&amp;</code>即有结果为0。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; !(n &amp; (n - <span class="number">1</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个题跟&lt;code&gt;Power of Three&lt;/code&gt;的思路基本一模一样，解法也差不多。但是因为是2啊，毕竟是计算机的进制数，所以&lt;code&gt;&amp;amp;&lt;/code&gt;,&lt;code&gt;|&lt;/code&gt;这些位操作总能出奇迹。&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://blog.iamxcc.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 326: Power of Three</title>
    <link href="http://blog.iamxcc.com/2016/08/08/LeetCode-326-Power-of-Three/"/>
    <id>http://blog.iamxcc.com/2016/08/08/LeetCode-326-Power-of-Three/</id>
    <published>2016-08-08T07:02:06.000Z</published>
    <updated>2016-08-08T07:55:28.625Z</updated>
    
    <content type="html"><![CDATA[<p>今天突然发现做LeetCode上Math的题目真心很有趣，不仅解法多样，还能时不时被绝妙的想法高潮一波。<a id="more"></a><br>Given an integer, write a function to determine if it is a power of three.<br><strong>Follow up:</strong><br>Could you do it without using any loop / recursion?</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题目因为有int的限制，所以知道3的次幂的数肯定大不过1162261467。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (n &gt; <span class="number">0</span> &amp;&amp; <span class="number">1162261467</span> % n == <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>利用log实现<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">fmod</span>(<span class="built_in">log10</span>(n)/<span class="built_in">log10</span>(<span class="number">3</span>), <span class="number">1</span>)==<span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>题目说明了不可以使用循环或递归：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 递归</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> n&gt;<span class="number">0</span> &amp;&amp; (n==<span class="number">1</span> || (n%<span class="number">3</span>==<span class="number">0</span> &amp;&amp; isPowerOfThree(n/<span class="number">3</span>)));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 循环</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(n&gt;<span class="number">1</span>)</div><div class="line">        <span class="keyword">while</span>(n%<span class="number">3</span>==<span class="number">0</span>) n /= <span class="number">3</span>;</div><div class="line">    <span class="keyword">return</span> n==<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>21038 / 21038 test cases passed.</code><br>Status: <code>Accepted</code><br>Runtime: <code>120 ms</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天突然发现做LeetCode上Math的题目真心很有趣，不仅解法多样，还能时不时被绝妙的想法高潮一波。
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://blog.iamxcc.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 232: Implement Queue using Stacks</title>
    <link href="http://blog.iamxcc.com/2016/08/08/LeetCode-232-Implement-Queue-using-Stacks/"/>
    <id>http://blog.iamxcc.com/2016/08/08/LeetCode-232-Implement-Queue-using-Stacks/</id>
    <published>2016-08-08T05:31:50.000Z</published>
    <updated>2016-08-08T07:54:08.585Z</updated>
    
    <content type="html"><![CDATA[<p>Implement the following operations of a queue using stacks. <a id="more"></a></p>
<ul>
<li>push(x) – Push element x to the back of queue.</li>
<li>pop() – Removes the element from in front of queue.</li>
<li>peek() – Get the front element.</li>
<li>empty() – Return whether the queue is empty.</li>
</ul>
<p><strong>Notes:</strong></p>
<ul>
<li><p>You must use only standard operations of a stack – which means only push to top, peek/pop from top, size, and is empty operations are valid.</p>
</li>
<li><p>Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack. </p>
</li>
<li><p>You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>C语言版本：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="comment">//using deque to imitate the two stacks operation avoid extra O(N) space wasting;</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> *<span class="built_in">stack</span>;</div><div class="line">    <span class="keyword">int</span> begin; <span class="comment">//begin -&gt; point to the exact first front element;</span></div><div class="line">    <span class="keyword">int</span> end; <span class="comment">//end -&gt; point to the next element of the last element to be easily indicate the empty case;</span></div><div class="line">    <span class="keyword">int</span> maxSize;</div><div class="line">&#125; Queue;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">queueCreate</span><span class="params">(Queue *<span class="built_in">queue</span>, <span class="keyword">int</span> maxSize)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">queue</span>-&gt;<span class="built_in">stack</span> = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*maxSize);</div><div class="line">    <span class="built_in">queue</span>-&gt;begin = <span class="number">0</span>;</div><div class="line">    <span class="built_in">queue</span>-&gt;end = <span class="number">0</span>;</div><div class="line">    <span class="built_in">queue</span>-&gt;maxSize = maxSize; <span class="comment">//record the maxSize for checking;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">queuePush</span><span class="params">(Queue *<span class="built_in">queue</span>, <span class="keyword">int</span> element)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">queue</span>-&gt;end == <span class="built_in">queue</span>-&gt;maxSize) <span class="comment">//reach its valid end, we have to rearrange the stack;</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="built_in">queue</span>-&gt;begin; i &lt; <span class="built_in">queue</span>-&gt;end; i++)</div><div class="line">            <span class="built_in">queue</span>-&gt;<span class="built_in">stack</span>[i-<span class="built_in">queue</span>-&gt;begin] = <span class="built_in">queue</span>-&gt;<span class="built_in">stack</span>[i];</div><div class="line">        <span class="built_in">queue</span>-&gt;begin = <span class="number">0</span>;</div><div class="line">        <span class="built_in">queue</span>-&gt;end -= <span class="built_in">queue</span>-&gt;begin;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">queue</span>-&gt;<span class="built_in">stack</span>[<span class="built_in">queue</span>-&gt;end++] = element;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">queuePop</span><span class="params">(Queue *<span class="built_in">queue</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">queue</span>-&gt;begin++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">queuePeek</span><span class="params">(Queue *<span class="built_in">queue</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">queue</span>-&gt;<span class="built_in">stack</span>[<span class="built_in">queue</span>-&gt;begin];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">queueEmpty</span><span class="params">(Queue *<span class="built_in">queue</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">queue</span>-&gt;begin == <span class="built_in">queue</span>-&gt;end;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">queueDestroy</span><span class="params">(Queue *<span class="built_in">queue</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">free</span>(<span class="built_in">queue</span>-&gt;<span class="built_in">stack</span>);</div><div class="line">    <span class="comment">/*free(queue); this part cannot be executed*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Implement the following operations of a queue using stacks.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Stack" scheme="http://blog.iamxcc.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 20: Valid Parentheses</title>
    <link href="http://blog.iamxcc.com/2016/08/07/LeetCode-20-Valid-Parentheses/"/>
    <id>http://blog.iamxcc.com/2016/08/07/LeetCode-20-Valid-Parentheses/</id>
    <published>2016-08-07T02:58:47.000Z</published>
    <updated>2016-08-07T12:42:50.239Z</updated>
    
    <content type="html"><![CDATA[<p>Given a string containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.<br><a id="more"></a>The brackets must close in the correct order, <code>&quot;()&quot;</code> and <code>&quot;()[]{}&quot;</code> are all valid but <code>&quot;(]&quot;</code> and <code>&quot;([)]&quot;</code> are not. </p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>看到这种括弧匹配问题，我首先想到的就是用stack来实现。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; paren;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">char</span>&amp; c : s) &#123;</div><div class="line">            <span class="keyword">switch</span> (c) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">'('</span>: </div><div class="line">                <span class="keyword">case</span> <span class="string">'&#123;'</span>: </div><div class="line">                <span class="keyword">case</span> <span class="string">'['</span>: paren.push(c); <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">')'</span>: <span class="keyword">if</span> (paren.empty() || paren.top()!=<span class="string">'('</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="keyword">else</span> paren.pop(); <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'&#125;'</span>: <span class="keyword">if</span> (paren.empty() || paren.top()!=<span class="string">'&#123;'</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="keyword">else</span> paren.pop(); <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">']'</span>: <span class="keyword">if</span> (paren.empty() || paren.top()!=<span class="string">'['</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="keyword">else</span> paren.pop(); <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>: ; <span class="comment">// pass</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> paren.empty() ;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>C语言版本：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="keyword">char</span>* s)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</div><div class="line">    <span class="keyword">if</span>( len%<span class="number">2</span> != <span class="number">0</span> )</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> limit = len/<span class="number">2</span>;</div><div class="line">    <span class="keyword">char</span> *<span class="built_in">stack</span> = <span class="built_in">malloc</span>(limit+<span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> topOfStack = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(s[i] == <span class="string">'('</span> || s[i] == <span class="string">'['</span> || s[i] ==<span class="string">'&#123;'</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(topOfStack == limit)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="built_in">stack</span>[++topOfStack] = s[i];</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span>(topOfStack == <span class="number">-1</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>( (<span class="built_in">stack</span>[topOfStack] == <span class="string">'('</span> &amp;&amp; s[i] == <span class="string">')'</span>) || (<span class="built_in">stack</span>[topOfStack] == <span class="string">'['</span> &amp;&amp; s[i] == <span class="string">']'</span>) || (<span class="built_in">stack</span>[topOfStack] == <span class="string">'&#123;'</span> &amp;&amp; s[i] == <span class="string">'&#125;'</span>) ) &#123;</div><div class="line">                topOfStack--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> topOfStack == <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a string containing just the characters &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;{&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;}&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;[&amp;#39;&lt;/code&gt; and &lt;code&gt;&amp;#39;]&amp;#39;&lt;/code&gt;, determine if the input string is valid.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
      <category term="算法" scheme="http://blog.iamxcc.com/categories/LeetCode/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://blog.iamxcc.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 125: Valid Palindrome</title>
    <link href="http://blog.iamxcc.com/2016/08/07/LeetCode-125-Valid-Palindrome/"/>
    <id>http://blog.iamxcc.com/2016/08/07/LeetCode-125-Valid-Palindrome/</id>
    <published>2016-08-07T02:07:53.000Z</published>
    <updated>2016-08-07T07:05:12.097Z</updated>
    
    <content type="html"><![CDATA[<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases. <a id="more"></a></p>
<p>For example,<br>“A man, a plan, a canal: Panama” is a palindrome.<br>“race a car” is not a palindrome.</p>
<p><strong>Note:</strong><br>Have you consider that the string might be empty? This is a good question to ask during an interview.<br>For the purpose of this problem, we define empty string as valid palindrome.</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我的想法是定义一个start指针和end指针，start从头部往尾部移动，end从尾部往头部移动，其中遇到非数字和字母时，要跳过。每次都做一下对比，不同就return 0。否则一直循环下去，如果一路顺利都是匹配的话，那么return 1。      不过有个地方需要注意，匹配是不区分大小写的，所以比较前要先把大写转化为小写。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">isAlphanumeric</span><span class="params">(<span class="keyword">char</span> p)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="string">'a'</span> &lt;= p &amp;&amp; p &lt;= <span class="string">'z'</span>) || (<span class="string">'A'</span> &lt;= p &amp;&amp; p &lt;= <span class="string">'Z'</span>) || (<span class="string">'0'</span> &lt;= p &amp;&amp; p &lt;= <span class="string">'9'</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">char</span> <span class="title">lower2Upper</span><span class="params">(<span class="keyword">char</span> p)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="string">'A'</span> &lt;= p &amp;&amp; p &lt;= <span class="string">'Z'</span>) &#123;</div><div class="line">		<span class="keyword">return</span> p + <span class="number">32</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> p;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">char</span>* s)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</div><div class="line">    <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> end = len - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</div><div class="line">        <span class="keyword">while</span> (!isAlphanumeric(s[start])) &#123;</div><div class="line">		<span class="keyword">if</span> (start &lt; end) &#123;</div><div class="line">			start++;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span> (!isAlphanumeric(s[end])) &#123;</div><div class="line">		<span class="keyword">if</span> (start &lt; end) &#123;</div><div class="line">			end--;</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">        <span class="keyword">if</span> (lower2Upper(s[start]) != lower2Upper(s[end])) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        start++;</div><div class="line">        end--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>476 / 476 test cases passed.</code><br>Status: <code>Accepted</code><br>Runtime: <code>4 ms</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://blog.iamxcc.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>趣说KMP算法</title>
    <link href="http://blog.iamxcc.com/2016/08/06/%E8%B6%A3%E8%AF%B4KMP%E7%AE%97%E6%B3%95/"/>
    <id>http://blog.iamxcc.com/2016/08/06/趣说KMP算法/</id>
    <published>2016-08-06T11:59:24.000Z</published>
    <updated>2016-08-06T12:04:51.241Z</updated>
    
    <content type="html"><![CDATA[<p>今天逛知乎时，发现了一个比较浅显易懂的KMP算法解释。故在此做个笔记 <a id="more"></a>。作者信息如下：<br>作者：逍遥行<br>链接：<a href="https://www.zhihu.com/question/21923021/answer/37475572" target="_blank" rel="external">https://www.zhihu.com/question/21923021/answer/37475572</a><br>来源：知乎<br>著作权归作者所有，转载请联系作者获得授权。</p>
<p>甲：abbaabbaaba<br>在里面寻找<br>乙：abbaaba<br>发现第 7 个字符不匹配。<br>这时候甲把乙叫走了，说你先一边玩去，我自己研究下。<br>然后甲想，自己已经知道乙的前 6 个字符就是自己的前 6 个字符，不妨先「自己与自己匹配一番」。<br>然后甲先用 abbaab 这 6 个已知的字符去匹配自身，错 1 个位，发现第一个就不一样（不匹配），然后错 2 个位，还是不匹配。<br>当错 3 个位的时候，甲发现匹配了一个 a，但是第二个 b 不匹配。<br>当错 4 个位的时候，匹配了两个。错 5 个位不匹配。后面的东西甲就不知道了，因为他只知道前 6 个字符。<br>（注：实际的匹配个数是字符串 [0…i] 的后缀与前缀的最长公共长度）</p>
<p>随后，甲把乙叫了过来：<br>「我已经知道你下一次匹配开始的位置了，来，让你的头部对齐我的第 5 个字符，然后从你的第 3 个字符开始继续匹配我吧！」</p>
<p>关键的地方，在于不要让乙「前功尽弃」——已经匹配了 6 个了，还差一个就结束了，这时不匹配导致从 0 开始，多可惜啊！<br>现在我告诉你，在不匹配的情况下，你仍然已经匹配了 2 个（乙内心：还好不是 0），并且你可以继续从不匹配的地方开始比较，即用你的 3 个字符与我继续匹配。<br>那，这个 2 你是怎么算的？<br>我在你来之前就算好啦！<br>我先与自己进行匹配（预处理），对每个位置，找「当前位置往前看的最长字符串，它与我的前缀匹配」（当然这个字符串不能是前缀），这个最长字符串的长度，在学术上称作「失配函数」。<br>UCCU，从你的第 6 个位置往前看，恰好 [ab] 与你的前缀 [ab] 匹配，但是我的第 7 个字符并不知道你的第 3 个字符是否与我一样，所以你直接从这里开始继续匹配我。</p>
<p>以上为 KMP 的基本思想，关键在于失配函数的计算，网上的代码很多，这里有个很好的例子你仔细体会下：ababzababa，注意最后一个失配函数的值为 3。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天逛知乎时，发现了一个比较浅显易懂的KMP算法解释。故在此做个笔记
    
    </summary>
    
      <category term="算法" scheme="http://blog.iamxcc.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="KMP算法" scheme="http://blog.iamxcc.com/tags/KMP%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 28: Implement strStr()</title>
    <link href="http://blog.iamxcc.com/2016/08/06/LeetCode-28-Implement-strStr/"/>
    <id>http://blog.iamxcc.com/2016/08/06/LeetCode-28-Implement-strStr/</id>
    <published>2016-08-06T10:12:33.000Z</published>
    <updated>2016-08-06T10:52:18.665Z</updated>
    
    <content type="html"><![CDATA[<p>Implement strStr(). Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.<br><a id="more"></a></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>一开始想的是暴力法，就是匹配串与被匹配串从开头开始比较，一发现不对劲，匹配串就向右移动一个单位重新开始比较，一直循环下去直到找到正确匹配位置。后来上网查了一下发现，这是个经典的字符串匹配问题，实现的算法有很多。比如：著名而难以理解的KMP算法、Brute-Force算法、Boyer-Moore算法、Sunday算法……。下面提供的就是Brute-Force算法。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>C语言版本：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="keyword">char</span>* haystack, <span class="keyword">char</span>* needle)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> m = <span class="built_in">strlen</span>(haystack);</div><div class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(needle);</div><div class="line">    <span class="keyword">if</span> (!n) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m - n + <span class="number">1</span>; i++) &#123;</div><div class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (; j &lt; n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (haystack[i+j] != needle[j])&#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (j == n) &#123;</div><div class="line">            <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>72 / 72 test cases passed.</code><br>Status: <code>Accepted</code><br>Runtime: <code>4 ms</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Implement strStr(). Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://blog.iamxcc.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>OSI模型与TCP/IP模型</title>
    <link href="http://blog.iamxcc.com/2016/08/06/OSI%E6%A8%A1%E5%9E%8B%E4%B8%8ETCP-IP%E6%A8%A1%E5%9E%8B/"/>
    <id>http://blog.iamxcc.com/2016/08/06/OSI模型与TCP-IP模型/</id>
    <published>2016-08-06T09:20:25.000Z</published>
    <updated>2016-08-06T09:28:19.600Z</updated>
    
    <content type="html"><![CDATA[<p>今天重新温习了一篇OSI模型与TCP/IP模型的知识，发现很多知识点又忘记了。所以，在此记录一下，方便下次查阅。<a id="more"></a></p>
<h2 id="OSI模型"><a href="#OSI模型" class="headerlink" title="OSI模型"></a>OSI模型</h2><p>从低到高：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。</p>
<h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><p>并不是指物理设备或者物理媒体。而是有关物理设备通过物理媒体进行互联的描述和规定。该层定义了接口的机械特性、电气特性、功能特性、规程特性等4个基本特性。物理层以比特流的方式传送来自数据链路层的数据，而不去理会数据的含义和格式。同样，接收数据后直接传给数据链路层。</p>
<h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h3><p>负责通过物理层从一台计算机到另外一台计算机无差错的传输数据帧，允许网络层通过网络连接进行虚拟无差错的传输。通常，数据链路层发送数据帧之后，等待接收方进行确认。接收方数据链路层检测帧传输过程中产生的任何问题。没有经过确认和损坏的帧都需要重传。</p>
<h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>负责信息寻址和将逻辑地址转换为物理地址。在网络层，数据传递单位是包。网络层的任务是选择合适的路径转发数据包。使发送方的数据包能够正确无误的按地址寻找到接收方的路径。并将数据包交给接收方。网络中两点之间可以到达的路径可能有很多，在选择最快捷、花费最低的路径时必须考虑网络拥塞程度、服务质量、线路的花费和线路的有效性。总的来说，网络层负责选择最佳路径。</p>
<p>网络层还能够协调发送、传输及接收设备的能力不平衡问题。如网络层对数据进行分段和重组，使得数据的长度能够满足该网络下层数据链路锁支持的最大数据帧MTU的长度。还需要考虑网络层不同网络协议之间的相互连接问题。</p>
<h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>传输层的功能是保证在不同子网的两台设备间数据包可靠、顺序、无错的传输。在传输层，数据传输单位是段。传输层负责处理端对端通信，即一个终端到另一个终端的通信，中间可以有多个交换节点。传输层向高层用户提供端到端的可靠的透明传输服务，为不同进程间的数据交换提供可靠的传输手段。在传输层的一个很重要的工作是数据的分段和重组，即把一个上层数据切割成更小的逻辑片和物理片。发送方在传输层把上层交给它的较大的数据进行分段后分别交给网络层进行独立输出，从而在传输层实现流量控制，提高网络资源的利用率。接收方收到数据后重组。传输层可以将收到的乱序数据包重新排序，并验证是否收到所有分组。</p>
<h3 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h3><p>会话层是利用传输层提供的端到端的服务，向表示层或会话用户提供会话服务。会话层主要功能是在两个节点之间建立、维护、释放面向用户的连接，并对会话进行管理和控制，保证会话数据可靠传送。会话层的连接与传输层的连接有1对1、1对多、多对1的关系。会话工程中，会话层需要决定到底使用全双工通信还是半双工通信。如果采用全双工，会话层的对话管理工作就很少。如果采用半双工，会话层则通过一个数据令牌来协调会话。保证每次只有一个用户能够传输数据。会话层提供同步服务，通过在数据流中定义检查点来把会话分割成明显的会话单元。当网络出故障时，从最后一个检查点开始重传数据。SQL、RPC(远程进程呼叫)都属于该层协议。</p>
<h3 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h3><p>表示层专门负责有关网络中计算机信息表示方式的问题。表示层在不同的数据格式之间进行数据转换，实现不同计算机之间的信息交换。除了编码，还包括数组、浮点数、记录、图像、声音等。表示层还负责数据的加密。文件的压缩，降低传输费用。</p>
<h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>直接与用户和应用程序打交道。负责对软件提供接口以使程序可以使用网络。Telnet(虚拟终端协议)、SMTP(简单邮件传输协议)、SNMP(简单网络管理协议)、DNS(域名系统)和超文本传输协议(HTTP)。</p>
<h2 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP/IP模型"></a>TCP/IP模型</h2><p>从低到高：网络接口层、网络层、传输层、应用层。</p>
<p>各层主要功能大致与OSI相对应。</p>
<p><strong>应用层协议：</strong>HTTP、FTP、SMTP、DNS。</p>
<p><strong>传输层协议：</strong>TCP、UDP。</p>
<p><strong>网络层协议：</strong>IP、ARP、ICMP(因特网控制消息协议)、RARP(反向地址解释协议)。</p>
<p><strong>网络接口层：</strong>Ethrenet、令牌环、帧中继、ISDN和分组交换网X.25。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天重新温习了一篇OSI模型与TCP/IP模型的知识，发现很多知识点又忘记了。所以，在此记录一下，方便下次查阅。
    
    </summary>
    
      <category term="计算机网络" scheme="http://blog.iamxcc.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://blog.iamxcc.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 8: String to Integer(atoi)</title>
    <link href="http://blog.iamxcc.com/2016/08/06/LeetCode-8-String-to-Integer-atoi/"/>
    <id>http://blog.iamxcc.com/2016/08/06/LeetCode-8-String-to-Integer-atoi/</id>
    <published>2016-08-06T05:38:56.000Z</published>
    <updated>2016-08-06T06:14:57.166Z</updated>
    
    <content type="html"><![CDATA[<p>Implement atoi to convert a string to an integer. Hint: Carefully consider all possible input cases. <a id="more"></a>If you want a challenge, please do not see below and ask yourself what are the possible input cases.</p>
<p><strong>Notes:</strong> It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front.</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>C语言版本：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(<span class="keyword">char</span>* str)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sign = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (!str) &#123;</div><div class="line">        <span class="keyword">return</span> str;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(<span class="string">' '</span> == *str) &#123;</div><div class="line">        str++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="string">'-'</span> == *str || <span class="string">'+'</span> == *str) &#123;</div><div class="line">        sign = *str++ == <span class="string">'+'</span> ? <span class="number">1</span> : <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(*str &gt;= <span class="string">'0'</span> &amp;&amp; *str &lt;= <span class="string">'9'</span>) &#123;</div><div class="line">	<span class="keyword">if</span> (res &gt; INT_MAX / <span class="number">10</span> || (res == INT_MAX / <span class="number">10</span> &amp;&amp; *str - <span class="string">'0'</span> &gt; <span class="number">7</span>)) &#123;</div><div class="line">		<span class="keyword">return</span> sign &gt; <span class="number">0</span> ? INT_MAX : INT_MIN;</div><div class="line">	&#125;</div><div class="line">	res = res * <span class="number">10</span> + (((<span class="keyword">int</span>)*str++) - <span class="string">'0'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res * sign;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>1047 / 1047 test cases passed.</code><br>Status: <code>Accepted</code><br>Runtime: <code>4 ms</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Implement atoi to convert a string to an integer. Hint: Carefully consider all possible input cases.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://blog.iamxcc.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 67: Add Binary</title>
    <link href="http://blog.iamxcc.com/2016/08/06/LeetCode-67-Add-Binary/"/>
    <id>http://blog.iamxcc.com/2016/08/06/LeetCode-67-Add-Binary/</id>
    <published>2016-08-06T03:29:22.000Z</published>
    <updated>2016-08-06T03:31:24.797Z</updated>
    
    <content type="html"><![CDATA[<p>Given two binary strings, return their sum (also a binary string). For example, a = <code>&quot;11&quot;</code>, b = <code>&quot;1&quot;</code>, Return <code>&quot;100&quot;</code>.<br><a id="more"></a></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>C语言版本：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">addBinary</span><span class="params">(<span class="keyword">char</span>* a, <span class="keyword">char</span>* b)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> lenA = <span class="built_in">strlen</span>(a);</div><div class="line">    <span class="keyword">int</span> lenB = <span class="built_in">strlen</span>(b);</div><div class="line">    <span class="keyword">int</span> len = lenA &gt; lenB ? lenA : lenB;</div><div class="line">    <span class="keyword">char</span> *sum = (<span class="keyword">char</span>*)<span class="built_in">calloc</span>(len + <span class="number">2</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line">    sum[len + <span class="number">1</span>] = <span class="string">'\0'</span>;</div><div class="line">    lenA--; lenB--;</div><div class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (lenA &gt;= <span class="number">0</span> || lenB &gt;= <span class="number">0</span>) &#123;</div><div class="line">        c += lenA &gt;= <span class="number">0</span> ? a[lenA--] - <span class="string">'0'</span> : <span class="number">0</span>;</div><div class="line">        c += lenB &gt;= <span class="number">0</span> ? b[lenB--] - <span class="string">'0'</span> : <span class="number">0</span>;</div><div class="line">        sum[len--] = c % <span class="number">2</span> + <span class="string">'0'</span>;</div><div class="line">        c /= <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!c) <span class="keyword">return</span> sum + <span class="number">1</span>;</div><div class="line">    sum[<span class="number">0</span>] = <span class="string">'1'</span>;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>294 / 294 test cases passed.</code><br>Status: <code>Accepted</code><br>Runtime: <code>0 ms</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given two binary strings, return their sum (also a binary string). For example, a = &lt;code&gt;&amp;quot;11&amp;quot;&lt;/code&gt;, b = &lt;code&gt;&amp;quot;1&amp;quot;&lt;/code&gt;, Return &lt;code&gt;&amp;quot;100&amp;quot;&lt;/code&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://blog.iamxcc.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 14: Longest Common Prefix</title>
    <link href="http://blog.iamxcc.com/2016/08/06/LeetCode-14-Longest-Common-Prefix/"/>
    <id>http://blog.iamxcc.com/2016/08/06/LeetCode-14-Longest-Common-Prefix/</id>
    <published>2016-08-06T02:19:56.000Z</published>
    <updated>2016-08-06T02:21:59.596Z</updated>
    
    <content type="html"><![CDATA[<p>Write a function to find the longest common prefix string amongst an array of strings. <a id="more"></a></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>C语言版本：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">longestCommonPrefix</span><span class="params">(<span class="keyword">char</span>** strs, <span class="keyword">int</span> strsSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (strs == <span class="literal">NULL</span> || *strs == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(strs[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">    <span class="keyword">char</span> *res;</div><div class="line">    <span class="keyword">while</span> (max &lt; len) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; strsSize; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (strs[i][max] != strs[<span class="number">0</span>][max]) &#123;</div><div class="line">                len = max;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (max &lt; len) max++;</div><div class="line">    &#125;</div><div class="line">    res = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*(max+<span class="number">1</span>));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max; i++) &#123;</div><div class="line">        res[i] = strs[<span class="number">0</span>][i];</div><div class="line">    &#125;</div><div class="line">    res[max] = <span class="string">'\0'</span>;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>117 / 117 test cases passed.</code><br>Status: <code>Accepted</code><br>Runtime: <code>0 ms</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Write a function to find the longest common prefix string amongst an array of strings.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://blog.iamxcc.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 345: Reverse Vowels of a String</title>
    <link href="http://blog.iamxcc.com/2016/08/06/LeetCode-345-Reverse-Vowels-of-a-String/"/>
    <id>http://blog.iamxcc.com/2016/08/06/LeetCode-345-Reverse-Vowels-of-a-String/</id>
    <published>2016-08-06T01:11:36.000Z</published>
    <updated>2016-08-06T01:14:24.580Z</updated>
    
    <content type="html"><![CDATA[<p>Write a function that takes a string as input and reverse only the vowels of a string.<a id="more"></a></p>
<p><strong>Example 1:</strong><br>Given s = “hello”, return “holle”.<br><strong>Example 2:</strong><br>Given s = “leetcode”, return “leotcede”.</p>
<p>Note:<br>The vowels does not include the letter “y”.</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>C语言版本：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">isVowelsChar</span><span class="params">(<span class="keyword">char</span> p)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (p == <span class="string">'a'</span> || p == <span class="string">'e'</span> || p == <span class="string">'i'</span> || p == <span class="string">'o'</span> || p == <span class="string">'u'</span> || p==<span class="string">'A'</span> || p==<span class="string">'E'</span> || p == <span class="string">'I'</span> || p == <span class="string">'O'</span> || p ==<span class="string">'U'</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">reverseVowels</span><span class="params">(<span class="keyword">char</span>* s)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> right = <span class="built_in">strlen</span>(s) - <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(s) &lt; <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">        <span class="keyword">while</span> (!isVowelsChar(s[left]) &amp;&amp; left &lt; right) &#123;</div><div class="line">            left++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (!isVowelsChar(s[right]) &amp;&amp; left &lt; right) &#123;</div><div class="line">            right--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">char</span> temp = s[left];</div><div class="line">		s[left] = s[right];</div><div class="line">		s[right] = temp;</div><div class="line">        left++;</div><div class="line">		right--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> s;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>481 / 481 test cases passed.</code><br>Status: <code>Accepted</code><br>Runtime: <code>4 ms</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Write a function that takes a string as input and reverse only the vowels of a string.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://blog.iamxcc.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>C语言实现strlen函数的方法</title>
    <link href="http://blog.iamxcc.com/2016/08/05/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0strlen%E5%87%BD%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.iamxcc.com/2016/08/05/C语言实现strlen函数的方法/</id>
    <published>2016-08-05T13:42:17.000Z</published>
    <updated>2016-08-05T13:51:29.610Z</updated>
    
    <content type="html"><![CDATA[<p>不使用中间变量求const字符串长度，即实现求字符串长度库函数strlen函数。函数接口声明如下：int strlen(const char *p)； <a id="more"></a></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>在字符串中通常可以利用最后一个结束符’\0’，但此处参数为const，只读，那么我们不能打他的主意。<br>函数运行过程中不占用内存基本不可能，除非都使用了寄存器。“不使用中间变量”只是说程序员不能显示的申请内存而已，即不能有局部变量或者动态内存申请。如果函数自动申请栈内存或者使用寄存器存储变量，或者使用立即数寻址即常量，那么就相当于“不使用中间变量”。<br>从函数原型看，返回值为int，那么在函数内部必定需要一个地方存储这个值，要么是常数要么是寄存器。长度不为1时不能一次就求出来，说明必须有递归调用，这样递归时函数会自动申请栈内存，这样就相当于程序员“不使用中间变量”了。中间返回的值通过寄存器自动保存，最后一次返回时拷贝到int中去。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mStrlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mStrlen1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mStrlen2</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> *str=<span class="literal">NULL</span>;</div><div class="line">    str = <span class="string">"Hello Jay!"</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"original strlen():%d\n"</span>,<span class="built_in">strlen</span>(str));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"myStrlen():%d\n"</span>,myStrlen(str));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"myStrlen1():%d\n"</span>,myStrlen1(str));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"myStrlen2():%d\n"</span>,myStrlen2(str));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mStrlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span>   <span class="comment">// 不用中间变量，用递归实现，很容易看懂</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ( (str == <span class="literal">NULL</span>) || (*str == <span class="string">'\0'</span>) ) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> myStrlen(str+<span class="number">1</span>)+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mStrlen1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span>  <span class="comment">// 不用中间变量，也是用递归实现，写得更简洁而已</span></span></div><div class="line">&#123;</div><div class="line">    assert(str != <span class="literal">NULL</span>);</div><div class="line">    <span class="keyword">return</span> *str ? (myStrlen1(++str) + <span class="number">1</span>) : <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mStrlen2</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span>  <span class="comment">// 使用了一个int型变量</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(str==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(; *str++ != <span class="string">'\0'</span>; )</div><div class="line">    &#123;</div><div class="line">        len++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> len;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不使用中间变量求const字符串长度，即实现求字符串长度库函数strlen函数。函数接口声明如下：int strlen(const char *p)；
    
    </summary>
    
      <category term="C语言" scheme="http://blog.iamxcc.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C语言" scheme="http://blog.iamxcc.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>NULL,&#39;\0&#39;,0,&#39;/0&#39;和&quot;0&quot;的区别</title>
    <link href="http://blog.iamxcc.com/2016/08/05/NULL,0,&#39;0&#39;/"/>
    <id>http://blog.iamxcc.com/2016/08/05/NULL,0,&#39;0&#39;/</id>
    <published>2016-08-05T13:03:42.000Z</published>
    <updated>2016-08-05T13:29:20.946Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现对于NULL,’\0’,0,’/0’和”0”的区别有点混淆了。所以在查阅资料之后，将笔记记录在此处，免得下次忘记了可以看看。<br><a id="more"></a></p>
<h2 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h2><p>NULL 即空指针，在C和C++中的形式不一样，msdn上有如下的内容那个：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(NULL)&amp;&amp;defined(__NEEDS_NULL)</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line">		<span class="meta">#<span class="meta-keyword">define</span> NULL 0</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">		<span class="meta">#<span class="meta-keyword">define</span> NULL ((void *)0)</span></div><div class="line">	<span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>NULL 在c中用（void*）0表示，在c++中用0表示。    </p>
<h2 id="‘-0’和’0’"><a href="#‘-0’和’0’" class="headerlink" title="‘\0’和’0’"></a>‘\0’和’0’</h2><ol>
<li><p>‘\0’表示字符串结束，它在ASCII中的值为0（数值0，非字符‘0’。所以在数值上NULL, ‘\0’,0是一样的，都是0，但’0’就不同了，在ASCII码中编码为48，所以字符0和上述三个值不同。</p>
</li>
<li><p>在内存中<code>NULL</code> 和<code>&#39;\0&#39;</code> 和<code>&#39;0&#39;</code>都是一个8位的char类型，NULL 和’\0’ 值一样，都是0，以数字方式读取就是0，以字符串读取时就是’\0’或者null（和编译器有关）。</p>
</li>
<li><p>而<code>&#39;0&#39;</code>在内存存储着<code>48</code>，以字符读取就是<code>&#39;0&#39;</code>,以数字读取就是<code>48</code>，至于<code>0</code>，可能是char ,int ,float,double等类型，但是值和<code>NULL</code>和<code>&#39;\0&#39;</code>一样，都是<code>0</code>。</p>
</li>
</ol>
<h2 id="‘-0’和’-0’"><a href="#‘-0’和’-0’" class="headerlink" title="‘/0’和’\0’"></a>‘/0’和’\0’</h2><p>我在写C代码时，经常把’\0’写成’/0’。其实这两者之间差别很大的。因为’/0’表示的是两个字符了，一个是’/‘, 另一个’0’。<br>而’\0’表示的字符串结束，值为0。</p>
<h2 id="“0”"><a href="#“0”" class="headerlink" title="“0”"></a>“0”</h2><p>“0”表示的是字符串，即在存储中存储了两个内容，一个是’0’(即字符0)，另一个是字符串结束符’\0’(也即数字0)。</p>
<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>为了说明情况，下面列举了几个例子。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="string">'0'</span>);	==&gt;<span class="number">48</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="string">'0'</span>);	==&gt;<span class="number">0</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="number">0</span>);		==&gt;空（即<span class="literal">NULL</span>）</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="number">0</span>);		==&gt;<span class="number">0</span></div><div class="line"></div><div class="line">那么<span class="number">0</span>+<span class="string">'0'</span>,<span class="number">0</span>+<span class="string">'\0'</span>分别是什么呢？</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="number">0</span>+<span class="string">'\0'</span>); ==&gt;空（<span class="literal">NULL</span>）<span class="comment">//先转换成int,然后ASCII编码相加为0，%c输出，转换成char,所以输出NULL</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="number">0</span>+<span class="string">'\0'</span>); ==&gt;<span class="number">0</span>   	 <span class="comment">//先转换成int，然后ASCII编码相加为0, %d输出，不用转换，输出数字0</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,<span class="number">0</span>+<span class="string">'0'</span>);  ==&gt;<span class="number">0</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,<span class="number">0</span>+<span class="string">'0'</span>);  ==&gt;<span class="number">48</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近发现对于NULL,’\0’,0,’/0’和”0”的区别有点混淆了。所以在查阅资料之后，将笔记记录在此处，免得下次忘记了可以看看。&lt;br&gt;
    
    </summary>
    
      <category term="C语言" scheme="http://blog.iamxcc.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C语言" scheme="http://blog.iamxcc.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 263: Ugly Number</title>
    <link href="http://blog.iamxcc.com/2016/08/05/LeetCode-263-Ugly-Number/"/>
    <id>http://blog.iamxcc.com/2016/08/05/LeetCode-263-Ugly-Number/</id>
    <published>2016-08-05T11:28:12.000Z</published>
    <updated>2016-08-05T11:29:54.368Z</updated>
    
    <content type="html"><![CDATA[<p>Write a program to check whether a given number is an ugly number. Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. <a id="more"></a> For example, 6, 8 are ugly while 14 is not ugly since it includes another prime factor 7.</p>
<p>Note that 1 is typically treated as an ugly number.</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>C语言版本：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isUgly</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;<span class="number">6</span> &amp;&amp; num; i++) &#123;</div><div class="line">        <span class="keyword">while</span> (num % i == <span class="number">0</span>) &#123;</div><div class="line">            num /= i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> num == <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>1012 / 1012 test cases passed.</code><br>Status: <code>Accepted</code><br>Runtime: <code>4 ms</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Write a program to check whether a given number is an ugly number. Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://blog.iamxcc.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 58: Length of Last Word</title>
    <link href="http://blog.iamxcc.com/2016/08/05/LeetCode-58-Length-of-Last-Word/"/>
    <id>http://blog.iamxcc.com/2016/08/05/LeetCode-58-Length-of-Last-Word/</id>
    <published>2016-08-05T10:23:40.000Z</published>
    <updated>2016-08-05T10:25:00.248Z</updated>
    
    <content type="html"><![CDATA[<p>Given a string s consists of upper/lower-case alphabets and empty space characters ‘ ‘, return the length of last word in the string. <a id="more"></a></p>
<p>If the last word does not exist, return 0.<br>Note: A word is defined as a character sequence consists of non-space characters only.</p>
<p><strong>For example,</strong><br>Given <code>s = &quot;Hello World&quot;</code>,<br>return <code>5</code>.</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>C语言版本：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">isChar</span><span class="params">(<span class="keyword">char</span> p)</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> (<span class="string">'a'</span>&lt;=p &amp;&amp; p&lt;=<span class="string">'z'</span>)||(<span class="string">'A'</span>&lt;=p &amp;&amp; p&lt;=<span class="string">'Z'</span>);  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLastWord</span><span class="params">(<span class="keyword">char</span>* s)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> size = <span class="built_in">strlen</span>(s);</div><div class="line">    <span class="keyword">int</span> begin;</div><div class="line">    <span class="keyword">int</span> end = size - <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (size &lt; <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(end &gt;= <span class="number">0</span> &amp;&amp; s[end] == <span class="string">' '</span>) &#123;</div><div class="line">        end--;</div><div class="line">    &#125;</div><div class="line">    begin = end;</div><div class="line">    <span class="keyword">while</span> ( begin &gt;= <span class="number">0</span> &amp;&amp; isChar(s[begin])) &#123;</div><div class="line">            begin--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> end - begin;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a string s consists of upper/lower-case alphabets and empty space characters ‘ ‘, return the length of last word in the string.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://blog.iamxcc.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 13: Roman to Integer</title>
    <link href="http://blog.iamxcc.com/2016/08/05/LeetCode-13-Roman-to-Integer/"/>
    <id>http://blog.iamxcc.com/2016/08/05/LeetCode-13-Roman-to-Integer/</id>
    <published>2016-08-05T09:34:44.000Z</published>
    <updated>2016-08-05T09:56:07.168Z</updated>
    
    <content type="html"><![CDATA[<p>Given a roman numeral, convert it to an integer.3999 / 3999 test cases passed. <a id="more"></a></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>C语言版本：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">romanCharToInt</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</div><div class="line">    <span class="keyword">switch</span> (c) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'I'</span>: 	<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'V'</span>:	<span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'X'</span>:	<span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'L'</span>:	<span class="keyword">return</span> <span class="number">50</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'C'</span>:	<span class="keyword">return</span> <span class="number">100</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'D'</span>:	<span class="keyword">return</span> <span class="number">500</span>;</div><div class="line">		<span class="keyword">case</span> <span class="string">'M'</span>:	<span class="keyword">return</span> <span class="number">1000</span>;</div><div class="line">		<span class="keyword">default</span>:	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="keyword">char</span>* s)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> size = <span class="built_in">strlen</span>(s);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (romanCharToInt(s[i]) &lt; romanCharToInt(s[i + <span class="number">1</span>]))&#123;</div><div class="line">            res -= romanCharToInt(s[i]);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            res += romanCharToInt(s[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>3999 / 3999 test cases passed.</code><br>Status: <code>Accepted</code><br>Runtime: <code>24 ms</code><br>C++版本：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(string s)</span> </span>&#123;</div><div class="line">            <span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> size = s.size();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">            	<span class="keyword">if</span> (i &lt; (size - <span class="number">1</span>) &amp;&amp; romanCharToInt(s[i]) &lt; romanCharToInt(s[i + <span class="number">1</span>])) &#123;</div><div class="line">            		num -= romanCharToInt(s[i]);</div><div class="line">            	&#125; <span class="keyword">else</span> &#123;</div><div class="line">    				num += romanCharToInt(s[i]);</div><div class="line">    			&#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> num;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">romanCharToInt</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</div><div class="line">        	<span class="keyword">switch</span> (c) &#123;</div><div class="line">        		<span class="keyword">case</span> <span class="string">'I'</span>: 	<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        		<span class="keyword">case</span> <span class="string">'V'</span>:	<span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">        		<span class="keyword">case</span> <span class="string">'X'</span>:	<span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">        		<span class="keyword">case</span> <span class="string">'L'</span>:	<span class="keyword">return</span> <span class="number">50</span>;</div><div class="line">        		<span class="keyword">case</span> <span class="string">'C'</span>:	<span class="keyword">return</span> <span class="number">100</span>;</div><div class="line">        		<span class="keyword">case</span> <span class="string">'D'</span>:	<span class="keyword">return</span> <span class="number">500</span>;</div><div class="line">        		<span class="keyword">case</span> <span class="string">'M'</span>:	<span class="keyword">return</span> <span class="number">1000</span>;</div><div class="line">        		<span class="keyword">default</span>:	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><code>3999 / 3999 test cases passed.</code><br>Status: <code>Accepted</code><br>Runtime: <code>36 ms</code><br>java版本：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="comment">//：Ⅰ（1）Ⅴ（5）Ⅹ（10）L（50）C（100）D（500）M（1000） </span></div><div class="line">        <span class="comment">// rules:位于大数的后面时就作为加数；位于大数的前面就作为减数</span></div><div class="line">        <span class="comment">//eg：Ⅲ=3,Ⅳ=4,Ⅵ=6,ⅩⅨ=19,ⅩⅩ=20,ⅩLⅤ=45,MCMⅩⅩC=1980</span></div><div class="line">        <span class="comment">//"DCXXI"</span></div><div class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> len = s.length();</div><div class="line">        HashMap&lt;Character,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character,Integer&gt;();</div><div class="line">        map.put(<span class="string">'I'</span>,<span class="number">1</span>);</div><div class="line">        map.put(<span class="string">'V'</span>,<span class="number">5</span>);</div><div class="line">        map.put(<span class="string">'X'</span>,<span class="number">10</span>);</div><div class="line">        map.put(<span class="string">'L'</span>,<span class="number">50</span>);</div><div class="line">        map.put(<span class="string">'C'</span>,<span class="number">100</span>);</div><div class="line">        map.put(<span class="string">'D'</span>,<span class="number">500</span>);</div><div class="line">        map.put(<span class="string">'M'</span>,<span class="number">1000</span>);</div><div class="line">        <span class="keyword">int</span> result = map.get(s.charAt(len -<span class="number">1</span>));</div><div class="line">        <span class="keyword">int</span> pivot = result;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = len -<span class="number">2</span>; i&gt;= <span class="number">0</span>;i--)&#123;</div><div class="line">            <span class="keyword">int</span> cur = map.get(s.charAt(i));</div><div class="line">            <span class="keyword">if</span>(cur &gt;=  pivot)&#123;</div><div class="line">                result += cur;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                result -= cur;</div><div class="line">            &#125;</div><div class="line">            pivot = cur;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>3999 / 3999 test cases passed.</code><br>Status: <code>Accepted</code><br>Runtime: <code>24 ms</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a roman numeral, convert it to an integer.3999 / 3999 test cases passed.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://blog.iamxcc.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 344: Reverse String</title>
    <link href="http://blog.iamxcc.com/2016/08/05/LeetCode-344-Reverse-String/"/>
    <id>http://blog.iamxcc.com/2016/08/05/LeetCode-344-Reverse-String/</id>
    <published>2016-08-05T09:12:25.000Z</published>
    <updated>2016-08-05T09:18:56.336Z</updated>
    
    <content type="html"><![CDATA[<p>Write a function that takes a string as input and returns the string reversed. Example: Given <code>s = &quot;hello&quot;</code>, return <code>&quot;olleh&quot;</code>. <a id="more"></a></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>C语言版本：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">reverseString</span><span class="params">(<span class="keyword">char</span>* s)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> right = <span class="built_in">strlen</span>(s) - <span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> (left&lt;right)&#123;</div><div class="line">        s[left] ^= s[right];</div><div class="line">        s[right] ^= s[left];</div><div class="line">        s[left] ^= s[right];</div><div class="line">        left++;</div><div class="line">        right--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> s;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>476 / 476 test cases passed.</code><br>Status: <code>Accepted</code><br>Runtime: <code>4 ms</code><br>C++版本：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">string <span class="title">reverseString</span><span class="params">(string s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = s.size() - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (l &lt; r)&#123;</div><div class="line">            swap(s[l++], s[r--]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><code>476 / 476 test cases passed.</code><br>Status: <code>Accepted</code><br>Runtime: <code>12 ms</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Write a function that takes a string as input and returns the string reversed. Example: Given &lt;code&gt;s = &amp;quot;hello&amp;quot;&lt;/code&gt;, return &lt;code&gt;&amp;quot;olleh&amp;quot;&lt;/code&gt;.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://blog.iamxcc.com/tags/String/"/>
    
  </entry>
  
</feed>
