<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡闹的日子</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.iamxcc.com/"/>
  <updated>2016-08-10T15:39:58.142Z</updated>
  <id>http://blog.iamxcc.com/</id>
  
  <author>
    <name>XCC</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PAT(Basic Level) 1001: 害死人不偿命的(3n+1)猜想</title>
    <link href="http://blog.iamxcc.com/2016/08/10/PAT-Basic-Level-1001-%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%84-3n-1-%E7%8C%9C%E6%83%B3/"/>
    <id>http://blog.iamxcc.com/2016/08/10/PAT-Basic-Level-1001-害死人不偿命的-3n-1-猜想/</id>
    <published>2016-08-10T12:05:49.000Z</published>
    <updated>2016-08-10T15:39:58.142Z</updated>
    
    <content type="html"><![CDATA[<p>卡拉兹(Callatz)猜想：对任何一个自然数n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把(3n+1)砍掉一半。<a id="more"></a> 这样一直反复砍下去，最后一定在某一步得到n=1。卡拉兹在1950年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证(3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p>
<p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过1000的正整数n，简单地数一下，需要多少步（砍几下）才能得到n=1？</p>
<p>输入格式：每个测试输入包含1个测试用例，即给出自然数n的值。</p>
<p>输出格式：输出从n计算到1需要的步数。</p>
<p>输入样例：<br>3<br>输出样例：<br>5</p>
<h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</div><div class="line">	<span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span> (num != <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">			num /= <span class="number">2</span>;</div><div class="line">			count++;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			num = (num * <span class="number">3</span> + <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">			count++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d/n"</span>, count);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;卡拉兹(Callatz)猜想：对任何一个自然数n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把(3n+1)砍掉一半。
    
    </summary>
    
      <category term="PAT" scheme="http://blog.iamxcc.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="http://blog.iamxcc.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>L1-002: 打印沙漏</title>
    <link href="http://blog.iamxcc.com/2016/08/10/L1-002-%E6%89%93%E5%8D%B0%E6%B2%99%E6%BC%8F/"/>
    <id>http://blog.iamxcc.com/2016/08/10/L1-002-打印沙漏/</id>
    <published>2016-08-10T11:00:27.000Z</published>
    <updated>2016-08-10T14:19:24.680Z</updated>
    
    <content type="html"><![CDATA[<p>本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印 <a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*****</div><div class="line"> ***</div><div class="line">  *</div><div class="line"> ***</div><div class="line">*****</div></pre></td></tr></table></figure></p>
<p>所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。</p>
<p>给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。</p>
<p>输入格式：</p>
<p>输入在一行给出1个正整数N（&lt;=1000）和一个符号，中间以空格分隔。</p>
<p>输出格式：</p>
<p>首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">输入样例：</div><div class="line">19 *</div><div class="line">输出样例：</div><div class="line">*****</div><div class="line"> ***</div><div class="line">  *</div><div class="line"> ***</div><div class="line">*****</div><div class="line">2</div></pre></td></tr></table></figure></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">	<span class="keyword">char</span> symbol;</div><div class="line">	<span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> times = <span class="number">0</span>;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %c"</span>, &amp;num, &amp;symbol);</div><div class="line">	max = <span class="built_in">sqrt</span>(<span class="number">2</span>*(num + <span class="number">1</span>)) - <span class="number">1</span>;</div><div class="line">	max = (max % <span class="number">2</span>) == <span class="number">0</span> ? max - <span class="number">1</span> : max;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max; i++) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; max; j++) &#123;</div><div class="line">			<span class="keyword">int</span> temp = i &gt; max / <span class="number">2</span> ? (max - i - <span class="number">1</span>) : i;</div><div class="line">			<span class="keyword">if</span> (temp &lt;= j &amp;&amp; j &lt;= max - <span class="number">1</span> - temp) &#123;</div><div class="line">				<span class="built_in">printf</span>(<span class="string">"%c"</span>, symbol);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (j &gt; max - <span class="number">1</span> - temp) &#123;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> left = <span class="built_in">pow</span>((max + <span class="number">1</span>), <span class="number">2</span>) / <span class="number">2</span> - <span class="number">1</span>;</div><div class="line">	left = left &gt; <span class="number">0</span> ? left : <span class="number">0</span>;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num - left);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印
    
    </summary>
    
      <category term="PAT" scheme="http://blog.iamxcc.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="http://blog.iamxcc.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 349: Intersection of Two Arrays</title>
    <link href="http://blog.iamxcc.com/2016/08/10/LeetCode-349-Intersection-of-Two-Arrays/"/>
    <id>http://blog.iamxcc.com/2016/08/10/LeetCode-349-Intersection-of-Two-Arrays/</id>
    <published>2016-08-10T05:25:50.000Z</published>
    <updated>2016-08-10T14:18:47.912Z</updated>
    
    <content type="html"><![CDATA[<p>Given two arrays, write a function to compute their intersection. <a id="more"></a></p>
<p><strong>Example:</strong><br>Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].</p>
<p><strong>Note:</strong><br>Each element in the result must be unique.<br>The result can be in any order.</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> *a, <span class="keyword">const</span> <span class="keyword">int</span> *b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> *a - *b;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Return an array of size *returnSize.</div><div class="line"> * Note: The returned array must be malloced, assume caller calls free().</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">int</span>* <span class="title">intersection</span><span class="params">(<span class="keyword">int</span>* nums1, <span class="keyword">int</span> nums1Size, <span class="keyword">int</span>* nums2, <span class="keyword">int</span> nums2Size, <span class="keyword">int</span>* returnSize)</span> </span>&#123;</div><div class="line">    qsort(nums1,nums1Size,<span class="keyword">sizeof</span>(<span class="keyword">int</span>),cmp);</div><div class="line">    qsort(nums2,nums2Size,<span class="keyword">sizeof</span>(<span class="keyword">int</span>),cmp);</div><div class="line">    <span class="keyword">int</span> size = nums1Size &lt; nums2Size ? nums1Size : nums2Size;</div><div class="line">    <span class="keyword">int</span>* arr = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*size); <span class="comment">//the size of the result will at most be size;</span></div><div class="line">    <span class="keyword">int</span> top = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> p1=<span class="number">0</span>, p2=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(p1&lt;nums1Size &amp;&amp; p2&lt;nums2Size)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(nums1[p1] &gt; nums2[p2]) p2++;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums1[p1] &lt; nums2[p2]) p1++;</div><div class="line">        <span class="keyword">else</span> <span class="comment">//only collect the equal one;</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(top==<span class="number">-1</span> || arr[top]!=nums1[p1])  <span class="comment">//avoid duplicates;</span></div><div class="line">                arr[++top] = nums1[p1];</div><div class="line">            p1++, p2++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    *returnSize = top+<span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given two arrays, write a function to compute their intersection.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Sort" scheme="http://blog.iamxcc.com/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 242: Valid Anagram</title>
    <link href="http://blog.iamxcc.com/2016/08/10/LeetCode-242-Valid-Anagram/"/>
    <id>http://blog.iamxcc.com/2016/08/10/LeetCode-242-Valid-Anagram/</id>
    <published>2016-08-10T05:08:47.000Z</published>
    <updated>2016-08-10T14:19:08.593Z</updated>
    
    <content type="html"><![CDATA[<p>Given two strings s and t, write a function to determine if t is an anagram of s. <a id="more"></a><br><strong>For example,</strong><br>s = “anagram”, t = “nagaram”, return true.<br>s = “rat”, t = “car”, return false.</p>
<p>Note:<br>You may assume the string contains only lowercase alphabets.</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a, <span class="keyword">const</span> <span class="keyword">char</span> *b)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> *a - *b;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isAnagram</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">char</span>* t)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> lenS = <span class="built_in">strlen</span>(s);</div><div class="line">    <span class="keyword">int</span> lenT = <span class="built_in">strlen</span>(t);</div><div class="line">    <span class="keyword">if</span> (lenS != lenT) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    qsort(s, lenS, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), cmp);</div><div class="line">    qsort(t, lenT, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), cmp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lenS; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (s[i] != t[i]) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given two strings s and t, write a function to determine if t is an anagram of s.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Sort" scheme="http://blog.iamxcc.com/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 191: Number of 1 Bits</title>
    <link href="http://blog.iamxcc.com/2016/08/10/LeetCode-191-Number-of-1-Bits/"/>
    <id>http://blog.iamxcc.com/2016/08/10/LeetCode-191-Number-of-1-Bits/</id>
    <published>2016-08-10T03:42:49.000Z</published>
    <updated>2016-08-10T03:43:36.392Z</updated>
    
    <content type="html"><![CDATA[<p>Write a function that takes an unsigned integer and returns the number of ’1’ bits it has (also known as the Hamming weight). <a id="more"></a><br>For example, the 32-bit integer ’11’ has binary representation <code>00000000000000000000000000001011</code>, so the function should return <code>3</code>.</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">uint32_t</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> nums = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> ( n != <span class="number">0</span>) &#123;</div><div class="line">        nums = nums + (n &amp; <span class="number">1</span>);</div><div class="line">        n = n &gt;&gt; <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> nums;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Write a function that takes an unsigned integer and returns the number of ’1’ bits it has (also known as the Hamming weight).
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Bit Manipulation" scheme="http://blog.iamxcc.com/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 338: Counting Bits</title>
    <link href="http://blog.iamxcc.com/2016/08/10/LeetCode-338-Counting-Bits/"/>
    <id>http://blog.iamxcc.com/2016/08/10/LeetCode-338-Counting-Bits/</id>
    <published>2016-08-10T03:23:44.000Z</published>
    <updated>2016-08-10T03:28:18.920Z</updated>
    
    <content type="html"><![CDATA[<p>Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1’s in their binary representation and return them as an array. <a id="more"></a></p>
<p>Example:<br>For num = 5 you should return [0,1,1,2,1,2].</p>
<p>Follow up:</p>
<p>It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?<br>Space complexity should be O(n).<br>Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Return an array of size *returnSize.</div><div class="line"> * Note: The returned array must be malloced, assume caller calls free().</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">int</span>* <span class="title">countBits</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span>* returnSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span>* res = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>((num+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line">    res[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++ ) &#123;</div><div class="line">        res[i] = res[i&gt;&gt;<span class="number">1</span>] + (i &amp; <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    *returnSize = num + <span class="number">1</span>; </div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1’s in their binary representation and return them as an array.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Bit Manipulation" scheme="http://blog.iamxcc.com/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 342: Power of Four</title>
    <link href="http://blog.iamxcc.com/2016/08/10/LeetCode-342-Power-of-Four/"/>
    <id>http://blog.iamxcc.com/2016/08/10/LeetCode-342-Power-of-Four/</id>
    <published>2016-08-10T02:56:19.000Z</published>
    <updated>2016-08-10T03:03:48.001Z</updated>
    
    <content type="html"><![CDATA[<p>Given an integer (signed 32 bits), write a function to check whether it is a power of 4. <a id="more"></a><br><strong>Example:</strong><br>Given num = 16, return true. Given num = 5, return false.<br>Follow up: Could you solve it without loops/recursion?</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先我们可以列出4, 16, 64, 256这几个数的二进制来看一下规律，发现它们都是在偶数位为1，而且只有一位是1，其余位都是0。有了上面这个规律我们就可以结题了。首先，筛选只有一位是1，其余位是0的数，使用<code>num &amp; (num-1)</code>即可。再使用<code>0x55555555</code>与num作位与操作<code>&amp;</code>即可发现，不是我们所要的数经过这步后都是0。到此我们就可以判断出结果了。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> num &gt; <span class="number">0</span> &amp;&amp; (num&amp;(num<span class="number">-1</span>)) == <span class="number">0</span> &amp;&amp; (num &amp; <span class="number">0x55555555</span>) != <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>1060 / 1060 test cases passed.</code><br>Status: <code>Accepted</code><br>Runtime: <code>4 ms</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given an integer (signed 32 bits), write a function to check whether it is a power of 4.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Bit Manipulation" scheme="http://blog.iamxcc.com/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>Chrome52中Mactype无效怎么回退版本</title>
    <link href="http://blog.iamxcc.com/2016/08/10/Chrome52%E4%B8%ADMactype%E6%97%A0%E6%95%88%E6%80%8E%E4%B9%88%E5%9B%9E%E9%80%80%E7%89%88%E6%9C%AC/"/>
    <id>http://blog.iamxcc.com/2016/08/10/Chrome52中Mactype无效怎么回退版本/</id>
    <published>2016-08-10T02:18:59.000Z</published>
    <updated>2016-08-10T02:28:44.914Z</updated>
    
    <content type="html"><![CDATA[<p>今天在chrome自动更新到523版本后，突然被chrome上显示的字体吓了一下，还以为什么坏了。后来才发现是mactype无效了，因为Chrome52后禁用DirectWrite渲染的选项已经没有了。<a id="more"></a> </p>
<p>没有办法只能去找各种各样的解决办法，先是试了stylish的方式，效果不明显。后来又去找mactype有没有新的版本。一直折腾了好久后，终于下定决心把chrome回退到上一个版本。 </p>
<p>可是怎么回退呢？卸载掉再重新装吗？<br>答案是不用这么麻烦。下面是解决办法，来自知乎 <a href="https://www.zhihu.com/people/zhen-ming-36-24" target="_blank" rel="external">Dorawei</a>：<br>C:\Program Files (x86)\Google\Chrome\Temp\ 下的一个文件夹中有old_chrome.exe，把它复制到C:\Program Files (x86)\Google\Chrome\Application 中改为 chrome.exe 就可以返回上一版了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在chrome自动更新到523版本后，突然被chrome上显示的字体吓了一下，还以为什么坏了。后来才发现是mactype无效了，因为Chrome52后禁用DirectWrite渲染的选项已经没有了。
    
    </summary>
    
      <category term="Mactype" scheme="http://blog.iamxcc.com/categories/Mactype/"/>
    
    
      <category term="Mactype" scheme="http://blog.iamxcc.com/tags/Mactype/"/>
    
      <category term="Chrome" scheme="http://blog.iamxcc.com/tags/Chrome/"/>
    
      <category term="Win10" scheme="http://blog.iamxcc.com/tags/Win10/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 258: Add Digits</title>
    <link href="http://blog.iamxcc.com/2016/08/09/LeetCode-258-Add-Digits/"/>
    <id>http://blog.iamxcc.com/2016/08/09/LeetCode-258-Add-Digits/</id>
    <published>2016-08-09T02:42:38.000Z</published>
    <updated>2016-08-09T02:43:23.378Z</updated>
    
    <content type="html"><![CDATA[<p>Given a non-negative integer num, repeatedly add all its digits until the result has only one digit. <a id="more"></a>For example:Given num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">addDigits</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> res = num % <span class="number">9</span>;</div><div class="line">    <span class="keyword">return</span> (res != <span class="number">0</span> || num == <span class="number">0</span>) ? res : <span class="number">9</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://blog.iamxcc.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 69: Sqrt(x)</title>
    <link href="http://blog.iamxcc.com/2016/08/09/LeetCode-69-Sqrt-x/"/>
    <id>http://blog.iamxcc.com/2016/08/09/LeetCode-69-Sqrt-x/</id>
    <published>2016-08-09T02:08:51.000Z</published>
    <updated>2016-08-09T02:29:46.675Z</updated>
    
    <content type="html"><![CDATA[<p>Implement int sqrt(int x). Compute and return the square root of x. <a id="more"></a></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这里使用的方法是：牛顿迭代法快速寻找平方根。如果想详细了解，可以看看这篇文章一个Sqrt函数引发的血案 <a href="http://diducoder.com/sotry-about-sqrt.html" target="_blank" rel="external">一个Sqrt函数引发的血案</a></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> r = x;</div><div class="line">    <span class="keyword">while</span> (r*r &gt; x)</div><div class="line">        r = (r + x/r) / <span class="number">2</span>;</div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Implement int sqrt(int x). Compute and return the square root of x.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://blog.iamxcc.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 50: Pow(x, n)</title>
    <link href="http://blog.iamxcc.com/2016/08/09/LeetCode-50-Pow-x-n/"/>
    <id>http://blog.iamxcc.com/2016/08/09/LeetCode-50-Pow-x-n/</id>
    <published>2016-08-09T01:57:20.000Z</published>
    <updated>2016-08-09T01:58:36.776Z</updated>
    
    <content type="html"><![CDATA[<p>Implement pow(x, n). <a id="more"></a></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">double</span> res = <span class="number">1</span>;</div><div class="line">    <span class="keyword">double</span> flag = x;</div><div class="line">    <span class="keyword">int</span> m = n;</div><div class="line">	<span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</div><div class="line">		x = <span class="number">1</span> / x;</div><div class="line">		<span class="keyword">if</span> (n == INT_MIN) &#123;</div><div class="line">			n = INT_MAX;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			n = -n;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span> (n&gt;<span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (n &amp; <span class="number">1</span> == <span class="number">1</span>) &#123;</div><div class="line">			res = res*x;</div><div class="line">		&#125;</div><div class="line">		x *= x;</div><div class="line">		n = n &gt;&gt; <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (m == INT_MIN) &#123;</div><div class="line">	    <span class="keyword">if</span> (flag &lt; <span class="number">0</span>) &#123;</div><div class="line">	        <span class="keyword">return</span> -res;</div><div class="line">	    &#125;</div><div class="line">	&#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Implement pow(x, n).
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://blog.iamxcc.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 7: Reverse integer</title>
    <link href="http://blog.iamxcc.com/2016/08/09/LeetCode-7-Reverse-integer/"/>
    <id>http://blog.iamxcc.com/2016/08/09/LeetCode-7-Reverse-integer/</id>
    <published>2016-08-09T00:37:40.000Z</published>
    <updated>2016-08-09T01:57:58.832Z</updated>
    
    <content type="html"><![CDATA[<p>Reverse digits of an integer. Example1: x = 123, return 321 Example2: x = -123, return -321. <a id="more"></a></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (res &gt; INT_MAX/<span class="number">10</span> ||res &lt; INT_MIN/<span class="number">10</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        res = x % <span class="number">10</span> + res * <span class="number">10</span>;</div><div class="line">        x /= <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Reverse digits of an integer. Example1: x = 123, return 321 Example2: x = -123, return -321.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://blog.iamxcc.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 12: Integer to Roman</title>
    <link href="http://blog.iamxcc.com/2016/08/09/LeetCode-12-Integer-to-Roman/"/>
    <id>http://blog.iamxcc.com/2016/08/09/LeetCode-12-Integer-to-Roman/</id>
    <published>2016-08-09T00:18:43.000Z</published>
    <updated>2016-08-09T06:23:15.703Z</updated>
    
    <content type="html"><![CDATA[<p>Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999. <a id="more"></a></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> *str = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>);</div><div class="line">    <span class="built_in">memset</span>(str,<span class="number">0</span>,<span class="number">100</span>);</div><div class="line">	<span class="keyword">char</span> *strM[] = &#123; <span class="string">""</span>, <span class="string">"M"</span>, <span class="string">"MM"</span>, <span class="string">"MMM"</span> &#125;;</div><div class="line">	<span class="keyword">char</span> *strC[] = &#123; <span class="string">""</span>, <span class="string">"C"</span>, <span class="string">"CC"</span>, <span class="string">"CCC"</span>, <span class="string">"CD"</span>, <span class="string">"D"</span>, <span class="string">"DC"</span>, <span class="string">"DCC"</span>, <span class="string">"DCCC"</span>, <span class="string">"CM"</span> &#125;;</div><div class="line">	<span class="keyword">char</span> *strX[] = &#123; <span class="string">""</span>, <span class="string">"X"</span>, <span class="string">"XX"</span>, <span class="string">"XXX"</span>, <span class="string">"XL"</span>, <span class="string">"L"</span>, <span class="string">"LX"</span>, <span class="string">"LXX"</span>, <span class="string">"LXXX"</span>, <span class="string">"XC"</span> &#125;;</div><div class="line">	<span class="keyword">char</span> *strI[] = &#123; <span class="string">""</span>, <span class="string">"I"</span>, <span class="string">"II"</span>, <span class="string">"III"</span>, <span class="string">"IV"</span>, <span class="string">"V"</span>, <span class="string">"VI"</span>, <span class="string">"VII"</span>, <span class="string">"VIII"</span>, <span class="string">"IX"</span> &#125;;</div><div class="line">	<span class="built_in">strcpy</span>(str, strM[num / <span class="number">1000</span>]);</div><div class="line">	<span class="built_in">strcat</span>(str, strC[(num % <span class="number">1000</span>) / <span class="number">100</span>]);</div><div class="line">	<span class="built_in">strcat</span>(str, strX[(num % <span class="number">100</span>) / <span class="number">10</span>]);</div><div class="line">	<span class="built_in">strcat</span>(str, strI[num % <span class="number">10</span>]);</div><div class="line">	<span class="keyword">return</span> str;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 这里不太明白char str[100] = &#123;0&#125; 为什么不行</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://blog.iamxcc.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 319: Bulb Switcher</title>
    <link href="http://blog.iamxcc.com/2016/08/08/LeetCode-319-Bulb-Switcher/"/>
    <id>http://blog.iamxcc.com/2016/08/08/LeetCode-319-Bulb-Switcher/</id>
    <published>2016-08-08T08:15:41.000Z</published>
    <updated>2016-08-08T08:52:14.614Z</updated>
    
    <content type="html"><![CDATA[<p>There are n bulbs that are initially off. You first turn on all the bulbs. Then, you turn off every second bulb. <a id="more"></a>  On the third round, you toggle every third bulb (turning on if it’s off or turning off if it’s on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb. Find how many bulbs are on after n rounds.</p>
<p>Example:</p>
<blockquote>
<p>Given n = 3.<br>At first, the three bulbs are [off, off, off].<br>After first round, the three bulbs are [on, on, on].<br>After second round, the three bulbs are [on, off, on].<br>After third round, the three bulbs are [on, off, off].<br>So you should return 1, because there is only one bulb is on.</p>
</blockquote>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>用数学的方法来思考这道题，会发现很简单。首先，决定一盏灯最后的亮灭取决于她所处在的序号。比如，6号灯最后一定是灭的，为什么呢？因为在n次操作中，只有她的因数次才能切换她的亮灭，比如第1次、第2次、第3次、第6次操作，又第1次是开，那么低6次后，她就灭了。所以要想亮，那么这个数要为有奇数个因数的数才行，而我们知道只有能开平方的数，有奇数个因数，因为她有一个不是成对出现的因数。所以要知道最后有几个灯是亮的，只要找到有几个小于n的能开平方数的数即可。而要计算一个数之下有多少小于或等于它的平方数，使用一个开平方用的函数就可以了。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bulbSwitch</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(n);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;There are n bulbs that are initially off. You first turn on all the bulbs. Then, you turn off every second bulb.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://blog.iamxcc.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 9: Palindrome Number</title>
    <link href="http://blog.iamxcc.com/2016/08/08/LeetCode-9-Palindrome-Number/"/>
    <id>http://blog.iamxcc.com/2016/08/08/LeetCode-9-Palindrome-Number/</id>
    <published>2016-08-08T07:52:04.000Z</published>
    <updated>2016-08-08T07:54:48.313Z</updated>
    
    <content type="html"><![CDATA[<p>Determine whether an integer is a palindrome. Do this without extra space. <a id="more"></a></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x!=<span class="number">0</span> &amp;&amp; x%<span class="number">10</span>==<span class="number">0</span>)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x &gt; sum) &#123;</div><div class="line">        sum = sum*<span class="number">10</span> + x%<span class="number">10</span>;</div><div class="line">        x /= <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (x==sum)||(x==sum/<span class="number">10</span>);</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Determine whether an integer is a palindrome. Do this without extra space.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://blog.iamxcc.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 231: Power of Two</title>
    <link href="http://blog.iamxcc.com/2016/08/08/LeetCode-231-Power-of-Two/"/>
    <id>http://blog.iamxcc.com/2016/08/08/LeetCode-231-Power-of-Two/</id>
    <published>2016-08-08T07:33:15.000Z</published>
    <updated>2016-08-08T07:56:22.033Z</updated>
    
    <content type="html"><![CDATA[<p>这个题跟<code>Power of Three</code>的思路基本一模一样，解法也差不多。但是因为是2啊，毕竟是计算机的进制数，所以<code>&amp;</code>,<code>|</code>这些位操作总能出奇迹。<br><a id="more"></a></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们可以列几个2的次幂数就可以发现，他们的二进制数的最高位为1，其他位都是0。所以让她与比她小的一个数的数做一下位与<code>&amp;</code>即有结果为0。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; !(n &amp; (n - <span class="number">1</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个题跟&lt;code&gt;Power of Three&lt;/code&gt;的思路基本一模一样，解法也差不多。但是因为是2啊，毕竟是计算机的进制数，所以&lt;code&gt;&amp;amp;&lt;/code&gt;,&lt;code&gt;|&lt;/code&gt;这些位操作总能出奇迹。&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://blog.iamxcc.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 326: Power of Three</title>
    <link href="http://blog.iamxcc.com/2016/08/08/LeetCode-326-Power-of-Three/"/>
    <id>http://blog.iamxcc.com/2016/08/08/LeetCode-326-Power-of-Three/</id>
    <published>2016-08-08T07:02:06.000Z</published>
    <updated>2016-08-08T07:55:28.625Z</updated>
    
    <content type="html"><![CDATA[<p>今天突然发现做LeetCode上Math的题目真心很有趣，不仅解法多样，还能时不时被绝妙的想法高潮一波。<a id="more"></a><br>Given an integer, write a function to determine if it is a power of three.<br><strong>Follow up:</strong><br>Could you do it without using any loop / recursion?</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题目因为有int的限制，所以知道3的次幂的数肯定大不过1162261467。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (n &gt; <span class="number">0</span> &amp;&amp; <span class="number">1162261467</span> % n == <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>利用log实现<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">fmod</span>(<span class="built_in">log10</span>(n)/<span class="built_in">log10</span>(<span class="number">3</span>), <span class="number">1</span>)==<span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>题目说明了不可以使用循环或递归：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 递归</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> n&gt;<span class="number">0</span> &amp;&amp; (n==<span class="number">1</span> || (n%<span class="number">3</span>==<span class="number">0</span> &amp;&amp; isPowerOfThree(n/<span class="number">3</span>)));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 循环</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(n&gt;<span class="number">1</span>)</div><div class="line">        <span class="keyword">while</span>(n%<span class="number">3</span>==<span class="number">0</span>) n /= <span class="number">3</span>;</div><div class="line">    <span class="keyword">return</span> n==<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>21038 / 21038 test cases passed.</code><br>Status: <code>Accepted</code><br>Runtime: <code>120 ms</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天突然发现做LeetCode上Math的题目真心很有趣，不仅解法多样，还能时不时被绝妙的想法高潮一波。
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://blog.iamxcc.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 232: Implement Queue using Stacks</title>
    <link href="http://blog.iamxcc.com/2016/08/08/LeetCode-232-Implement-Queue-using-Stacks/"/>
    <id>http://blog.iamxcc.com/2016/08/08/LeetCode-232-Implement-Queue-using-Stacks/</id>
    <published>2016-08-08T05:31:50.000Z</published>
    <updated>2016-08-08T07:54:08.585Z</updated>
    
    <content type="html"><![CDATA[<p>Implement the following operations of a queue using stacks. <a id="more"></a></p>
<ul>
<li>push(x) – Push element x to the back of queue.</li>
<li>pop() – Removes the element from in front of queue.</li>
<li>peek() – Get the front element.</li>
<li>empty() – Return whether the queue is empty.</li>
</ul>
<p><strong>Notes:</strong></p>
<ul>
<li><p>You must use only standard operations of a stack – which means only push to top, peek/pop from top, size, and is empty operations are valid.</p>
</li>
<li><p>Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack. </p>
</li>
<li><p>You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>C语言版本：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="comment">//using deque to imitate the two stacks operation avoid extra O(N) space wasting;</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> *<span class="built_in">stack</span>;</div><div class="line">    <span class="keyword">int</span> begin; <span class="comment">//begin -&gt; point to the exact first front element;</span></div><div class="line">    <span class="keyword">int</span> end; <span class="comment">//end -&gt; point to the next element of the last element to be easily indicate the empty case;</span></div><div class="line">    <span class="keyword">int</span> maxSize;</div><div class="line">&#125; Queue;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">queueCreate</span><span class="params">(Queue *<span class="built_in">queue</span>, <span class="keyword">int</span> maxSize)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">queue</span>-&gt;<span class="built_in">stack</span> = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*maxSize);</div><div class="line">    <span class="built_in">queue</span>-&gt;begin = <span class="number">0</span>;</div><div class="line">    <span class="built_in">queue</span>-&gt;end = <span class="number">0</span>;</div><div class="line">    <span class="built_in">queue</span>-&gt;maxSize = maxSize; <span class="comment">//record the maxSize for checking;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">queuePush</span><span class="params">(Queue *<span class="built_in">queue</span>, <span class="keyword">int</span> element)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">queue</span>-&gt;end == <span class="built_in">queue</span>-&gt;maxSize) <span class="comment">//reach its valid end, we have to rearrange the stack;</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="built_in">queue</span>-&gt;begin; i &lt; <span class="built_in">queue</span>-&gt;end; i++)</div><div class="line">            <span class="built_in">queue</span>-&gt;<span class="built_in">stack</span>[i-<span class="built_in">queue</span>-&gt;begin] = <span class="built_in">queue</span>-&gt;<span class="built_in">stack</span>[i];</div><div class="line">        <span class="built_in">queue</span>-&gt;begin = <span class="number">0</span>;</div><div class="line">        <span class="built_in">queue</span>-&gt;end -= <span class="built_in">queue</span>-&gt;begin;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">queue</span>-&gt;<span class="built_in">stack</span>[<span class="built_in">queue</span>-&gt;end++] = element;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">queuePop</span><span class="params">(Queue *<span class="built_in">queue</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">queue</span>-&gt;begin++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">queuePeek</span><span class="params">(Queue *<span class="built_in">queue</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">queue</span>-&gt;<span class="built_in">stack</span>[<span class="built_in">queue</span>-&gt;begin];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">queueEmpty</span><span class="params">(Queue *<span class="built_in">queue</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">queue</span>-&gt;begin == <span class="built_in">queue</span>-&gt;end;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">queueDestroy</span><span class="params">(Queue *<span class="built_in">queue</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">free</span>(<span class="built_in">queue</span>-&gt;<span class="built_in">stack</span>);</div><div class="line">    <span class="comment">/*free(queue); this part cannot be executed*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Implement the following operations of a queue using stacks.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="Stack" scheme="http://blog.iamxcc.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 20: Valid Parentheses</title>
    <link href="http://blog.iamxcc.com/2016/08/07/LeetCode-20-Valid-Parentheses/"/>
    <id>http://blog.iamxcc.com/2016/08/07/LeetCode-20-Valid-Parentheses/</id>
    <published>2016-08-07T02:58:47.000Z</published>
    <updated>2016-08-07T12:42:50.239Z</updated>
    
    <content type="html"><![CDATA[<p>Given a string containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.<br><a id="more"></a>The brackets must close in the correct order, <code>&quot;()&quot;</code> and <code>&quot;()[]{}&quot;</code> are all valid but <code>&quot;(]&quot;</code> and <code>&quot;([)]&quot;</code> are not. </p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>看到这种括弧匹配问题，我首先想到的就是用stack来实现。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; paren;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">char</span>&amp; c : s) &#123;</div><div class="line">            <span class="keyword">switch</span> (c) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">'('</span>: </div><div class="line">                <span class="keyword">case</span> <span class="string">'&#123;'</span>: </div><div class="line">                <span class="keyword">case</span> <span class="string">'['</span>: paren.push(c); <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">')'</span>: <span class="keyword">if</span> (paren.empty() || paren.top()!=<span class="string">'('</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="keyword">else</span> paren.pop(); <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'&#125;'</span>: <span class="keyword">if</span> (paren.empty() || paren.top()!=<span class="string">'&#123;'</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="keyword">else</span> paren.pop(); <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">']'</span>: <span class="keyword">if</span> (paren.empty() || paren.top()!=<span class="string">'['</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="keyword">else</span> paren.pop(); <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>: ; <span class="comment">// pass</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> paren.empty() ;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>C语言版本：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="keyword">char</span>* s)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</div><div class="line">    <span class="keyword">if</span>( len%<span class="number">2</span> != <span class="number">0</span> )</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> limit = len/<span class="number">2</span>;</div><div class="line">    <span class="keyword">char</span> *<span class="built_in">stack</span> = <span class="built_in">malloc</span>(limit+<span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> topOfStack = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(s[i] == <span class="string">'('</span> || s[i] == <span class="string">'['</span> || s[i] ==<span class="string">'&#123;'</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(topOfStack == limit)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="built_in">stack</span>[++topOfStack] = s[i];</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span>(topOfStack == <span class="number">-1</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>( (<span class="built_in">stack</span>[topOfStack] == <span class="string">'('</span> &amp;&amp; s[i] == <span class="string">')'</span>) || (<span class="built_in">stack</span>[topOfStack] == <span class="string">'['</span> &amp;&amp; s[i] == <span class="string">']'</span>) || (<span class="built_in">stack</span>[topOfStack] == <span class="string">'&#123;'</span> &amp;&amp; s[i] == <span class="string">'&#125;'</span>) ) &#123;</div><div class="line">                topOfStack--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> topOfStack == <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a string containing just the characters &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;{&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;}&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;[&amp;#39;&lt;/code&gt; and &lt;code&gt;&amp;#39;]&amp;#39;&lt;/code&gt;, determine if the input string is valid.&lt;br&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
      <category term="算法" scheme="http://blog.iamxcc.com/categories/LeetCode/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://blog.iamxcc.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 125: Valid Palindrome</title>
    <link href="http://blog.iamxcc.com/2016/08/07/LeetCode-125-Valid-Palindrome/"/>
    <id>http://blog.iamxcc.com/2016/08/07/LeetCode-125-Valid-Palindrome/</id>
    <published>2016-08-07T02:07:53.000Z</published>
    <updated>2016-08-07T07:05:12.097Z</updated>
    
    <content type="html"><![CDATA[<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases. <a id="more"></a></p>
<p>For example,<br>“A man, a plan, a canal: Panama” is a palindrome.<br>“race a car” is not a palindrome.</p>
<p><strong>Note:</strong><br>Have you consider that the string might be empty? This is a good question to ask during an interview.<br>For the purpose of this problem, we define empty string as valid palindrome.</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我的想法是定义一个start指针和end指针，start从头部往尾部移动，end从尾部往头部移动，其中遇到非数字和字母时，要跳过。每次都做一下对比，不同就return 0。否则一直循环下去，如果一路顺利都是匹配的话，那么return 1。      不过有个地方需要注意，匹配是不区分大小写的，所以比较前要先把大写转化为小写。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">isAlphanumeric</span><span class="params">(<span class="keyword">char</span> p)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="string">'a'</span> &lt;= p &amp;&amp; p &lt;= <span class="string">'z'</span>) || (<span class="string">'A'</span> &lt;= p &amp;&amp; p &lt;= <span class="string">'Z'</span>) || (<span class="string">'0'</span> &lt;= p &amp;&amp; p &lt;= <span class="string">'9'</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">char</span> <span class="title">lower2Upper</span><span class="params">(<span class="keyword">char</span> p)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="string">'A'</span> &lt;= p &amp;&amp; p &lt;= <span class="string">'Z'</span>) &#123;</div><div class="line">		<span class="keyword">return</span> p + <span class="number">32</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> p;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">char</span>* s)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</div><div class="line">    <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> end = len - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</div><div class="line">        <span class="keyword">while</span> (!isAlphanumeric(s[start])) &#123;</div><div class="line">		<span class="keyword">if</span> (start &lt; end) &#123;</div><div class="line">			start++;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span> (!isAlphanumeric(s[end])) &#123;</div><div class="line">		<span class="keyword">if</span> (start &lt; end) &#123;</div><div class="line">			end--;</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">        <span class="keyword">if</span> (lower2Upper(s[start]) != lower2Upper(s[end])) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        start++;</div><div class="line">        end--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>476 / 476 test cases passed.</code><br>Status: <code>Accepted</code><br>Runtime: <code>4 ms</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.
    
    </summary>
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://blog.iamxcc.com/tags/LeetCode/"/>
    
      <category term="String" scheme="http://blog.iamxcc.com/tags/String/"/>
    
  </entry>
  
</feed>
